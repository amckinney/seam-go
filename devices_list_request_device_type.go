// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type DevicesListRequestDeviceType struct {
	typeName                                                 string
	DevicesListRequestDeviceTypeDevicesListRequestDeviceType DevicesListRequestDeviceTypeDevicesListRequestDeviceType
	DevicesListRequestDeviceTypeDevicesListRequestDeviceType DevicesListRequestDeviceTypeDevicesListRequestDeviceType
	DevicesListRequestDeviceTypeDevicesListRequestDeviceType DevicesListRequestDeviceTypeDevicesListRequestDeviceType
}

func NewDevicesListRequestDeviceTypeFromDevicesListRequestDeviceTypeDevicesListRequestDeviceType(value DevicesListRequestDeviceTypeDevicesListRequestDeviceType) *DevicesListRequestDeviceType {
	return &DevicesListRequestDeviceType{typeName: "devicesListRequestDeviceTypeDevicesListRequestDeviceType", DevicesListRequestDeviceTypeDevicesListRequestDeviceType: value}
}

func NewDevicesListRequestDeviceTypeFromDevicesListRequestDeviceTypeDevicesListRequestDeviceType(value DevicesListRequestDeviceTypeDevicesListRequestDeviceType) *DevicesListRequestDeviceType {
	return &DevicesListRequestDeviceType{typeName: "devicesListRequestDeviceTypeDevicesListRequestDeviceType", DevicesListRequestDeviceTypeDevicesListRequestDeviceType: value}
}

func NewDevicesListRequestDeviceTypeFromDevicesListRequestDeviceTypeDevicesListRequestDeviceType(value DevicesListRequestDeviceTypeDevicesListRequestDeviceType) *DevicesListRequestDeviceType {
	return &DevicesListRequestDeviceType{typeName: "devicesListRequestDeviceTypeDevicesListRequestDeviceType", DevicesListRequestDeviceTypeDevicesListRequestDeviceType: value}
}

func (d *DevicesListRequestDeviceType) UnmarshalJSON(data []byte) error {
	var valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType DevicesListRequestDeviceTypeDevicesListRequestDeviceType
	if err := json.Unmarshal(data, &valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType); err == nil {
		d.typeName = "devicesListRequestDeviceTypeDevicesListRequestDeviceType"
		d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType = valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType
		return nil
	}
	var valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType DevicesListRequestDeviceTypeDevicesListRequestDeviceType
	if err := json.Unmarshal(data, &valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType); err == nil {
		d.typeName = "devicesListRequestDeviceTypeDevicesListRequestDeviceType"
		d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType = valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType
		return nil
	}
	var valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType DevicesListRequestDeviceTypeDevicesListRequestDeviceType
	if err := json.Unmarshal(data, &valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType); err == nil {
		d.typeName = "devicesListRequestDeviceTypeDevicesListRequestDeviceType"
		d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType = valueDevicesListRequestDeviceTypeDevicesListRequestDeviceType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DevicesListRequestDeviceType) MarshalJSON() ([]byte, error) {
	switch d.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicesListRequestDeviceTypeDevicesListRequestDeviceType":
		return json.Marshal(d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType)
	case "devicesListRequestDeviceTypeDevicesListRequestDeviceType":
		return json.Marshal(d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType)
	case "devicesListRequestDeviceTypeDevicesListRequestDeviceType":
		return json.Marshal(d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType)
	}
}

type DevicesListRequestDeviceTypeVisitor interface {
	VisitDevicesListRequestDeviceTypeDevicesListRequestDeviceType(DevicesListRequestDeviceTypeDevicesListRequestDeviceType) error
	VisitDevicesListRequestDeviceTypeDevicesListRequestDeviceType(DevicesListRequestDeviceTypeDevicesListRequestDeviceType) error
	VisitDevicesListRequestDeviceTypeDevicesListRequestDeviceType(DevicesListRequestDeviceTypeDevicesListRequestDeviceType) error
}

func (d *DevicesListRequestDeviceType) Accept(v DevicesListRequestDeviceTypeVisitor) error {
	switch d.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicesListRequestDeviceTypeDevicesListRequestDeviceType":
		return v.VisitDevicesListRequestDeviceTypeDevicesListRequestDeviceType(d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType)
	case "devicesListRequestDeviceTypeDevicesListRequestDeviceType":
		return v.VisitDevicesListRequestDeviceTypeDevicesListRequestDeviceType(d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType)
	case "devicesListRequestDeviceTypeDevicesListRequestDeviceType":
		return v.VisitDevicesListRequestDeviceTypeDevicesListRequestDeviceType(d.DevicesListRequestDeviceTypeDevicesListRequestDeviceType)
	}
}
