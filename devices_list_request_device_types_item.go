// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type DevicesListRequestDeviceTypesItem struct {
	typeName                                                           string
	DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
	DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
	DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
}

func NewDevicesListRequestDeviceTypesItemFromDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(value DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem) *DevicesListRequestDeviceTypesItem {
	return &DevicesListRequestDeviceTypesItem{typeName: "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem", DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem: value}
}

func NewDevicesListRequestDeviceTypesItemFromDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(value DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem) *DevicesListRequestDeviceTypesItem {
	return &DevicesListRequestDeviceTypesItem{typeName: "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem", DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem: value}
}

func NewDevicesListRequestDeviceTypesItemFromDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(value DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem) *DevicesListRequestDeviceTypesItem {
	return &DevicesListRequestDeviceTypesItem{typeName: "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem", DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem: value}
}

func (d *DevicesListRequestDeviceTypesItem) UnmarshalJSON(data []byte) error {
	var valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
	if err := json.Unmarshal(data, &valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem); err == nil {
		d.typeName = "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem"
		d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem = valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
		return nil
	}
	var valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
	if err := json.Unmarshal(data, &valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem); err == nil {
		d.typeName = "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem"
		d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem = valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
		return nil
	}
	var valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
	if err := json.Unmarshal(data, &valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem); err == nil {
		d.typeName = "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem"
		d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem = valueDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DevicesListRequestDeviceTypesItem) MarshalJSON() ([]byte, error) {
	switch d.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem":
		return json.Marshal(d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem)
	case "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem":
		return json.Marshal(d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem)
	case "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem":
		return json.Marshal(d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem)
	}
}

type DevicesListRequestDeviceTypesItemVisitor interface {
	VisitDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem) error
	VisitDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem) error
	VisitDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem) error
}

func (d *DevicesListRequestDeviceTypesItem) Accept(v DevicesListRequestDeviceTypesItemVisitor) error {
	switch d.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem":
		return v.VisitDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem)
	case "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem":
		return v.VisitDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem)
	case "devicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem":
		return v.VisitDevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem(d.DevicesListRequestDeviceTypesItemDevicesListRequestDeviceTypesItem)
	}
}
