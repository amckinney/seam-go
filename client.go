// This file was auto-generated by Fern from our API Definition.

package api

import (
	core "github.com/seamapi/go/core"
	noisesensors "github.com/seamapi/go/noisesensors"
	http "net/http"
)

type Client interface {
	AccessCodes() AccessCodesClient
	ActionAttempts() ActionAttemptsClient
	ClientSessions() ClientSessionsClient
	ConnectedAccounts() ConnectedAccountsClient
	ConnectWebviews() ConnectWebviewsClient
	Devices() DevicesClient
	Events() EventsClient
	Health() HealthClient
	Locks() LocksClient
	NoiseSensors() noisesensors.Client
	Thermostats() ThermostatsClient
	Webhooks() WebhooksClient
	Workspaces() WorkspacesClient
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:                 options.BaseURL,
		httpClient:              options.HTTPClient,
		header:                  options.ToHeader(),
		accessCodesClient:       NewAccessCodesClient(opts...),
		actionAttemptsClient:    NewActionAttemptsClient(opts...),
		clientSessionsClient:    NewClientSessionsClient(opts...),
		connectedAccountsClient: NewConnectedAccountsClient(opts...),
		connectWebviewsClient:   NewConnectWebviewsClient(opts...),
		devicesClient:           NewDevicesClient(opts...),
		eventsClient:            NewEventsClient(opts...),
		healthClient:            NewHealthClient(opts...),
		locksClient:             NewLocksClient(opts...),
		noiseSensorsClient:      noisesensors.NewClient(opts...),
		thermostatsClient:       NewThermostatsClient(opts...),
		webhooksClient:          NewWebhooksClient(opts...),
		workspacesClient:        NewWorkspacesClient(opts...),
	}
}

type client struct {
	baseURL                 string
	httpClient              core.HTTPClient
	header                  http.Header
	accessCodesClient       AccessCodesClient
	actionAttemptsClient    ActionAttemptsClient
	clientSessionsClient    ClientSessionsClient
	connectedAccountsClient ConnectedAccountsClient
	connectWebviewsClient   ConnectWebviewsClient
	devicesClient           DevicesClient
	eventsClient            EventsClient
	healthClient            HealthClient
	locksClient             LocksClient
	noiseSensorsClient      noisesensors.Client
	thermostatsClient       ThermostatsClient
	webhooksClient          WebhooksClient
	workspacesClient        WorkspacesClient
}

func (c *client) AccessCodes() AccessCodesClient {
	return c.accessCodesClient
}

func (c *client) ActionAttempts() ActionAttemptsClient {
	return c.actionAttemptsClient
}

func (c *client) ClientSessions() ClientSessionsClient {
	return c.clientSessionsClient
}

func (c *client) ConnectedAccounts() ConnectedAccountsClient {
	return c.connectedAccountsClient
}

func (c *client) ConnectWebviews() ConnectWebviewsClient {
	return c.connectWebviewsClient
}

func (c *client) Devices() DevicesClient {
	return c.devicesClient
}

func (c *client) Events() EventsClient {
	return c.eventsClient
}

func (c *client) Health() HealthClient {
	return c.healthClient
}

func (c *client) Locks() LocksClient {
	return c.locksClient
}

func (c *client) NoiseSensors() noisesensors.Client {
	return c.noiseSensorsClient
}

func (c *client) Thermostats() ThermostatsClient {
	return c.thermostatsClient
}

func (c *client) Webhooks() WebhooksClient {
	return c.webhooksClient
}

func (c *client) Workspaces() WorkspacesClient {
	return c.workspacesClient
}
