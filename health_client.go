// This file was auto-generated by Fern from our API Definition.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	core "github.com/seamapi/go/core"
	io "io"
	http "net/http"
)

type HealthClient interface {
	GetHealth(ctx context.Context) (*HealthGetHealthResponse, error)
	GetServiceHealth(ctx context.Context, request *HealthGetServiceHealthRequest) (*HealthGetServiceHealthResponse, error)
	Service() ServiceClient
}

func NewHealthClient(opts ...core.ClientOption) HealthClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &healthClient{
		baseURL:       options.BaseURL,
		httpClient:    options.HTTPClient,
		header:        options.ToHeader(),
		serviceClient: NewServiceClient(opts...),
	}
}

type healthClient struct {
	baseURL       string
	httpClient    core.HTTPClient
	header        http.Header
	serviceClient ServiceClient
}

func (h *healthClient) GetHealth(ctx context.Context) (*HealthGetHealthResponse, error) {
	baseURL := "https://connect.getseam.com"
	if h.baseURL != "" {
		baseURL = h.baseURL
	}
	endpointURL := baseURL + "/" + "health/get_health"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *HealthGetHealthResponse
	if err := core.DoRequest(
		ctx,
		h.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		h.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (h *healthClient) GetServiceHealth(ctx context.Context, request *HealthGetServiceHealthRequest) (*HealthGetServiceHealthResponse, error) {
	baseURL := "https://connect.getseam.com"
	if h.baseURL != "" {
		baseURL = h.baseURL
	}
	endpointURL := baseURL + "/" + "health/get_service_health"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *HealthGetServiceHealthResponse
	if err := core.DoRequest(
		ctx,
		h.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		h.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (h *healthClient) Service() ServiceClient {
	return h.serviceClient
}
