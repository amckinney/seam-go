// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type DevicesUnmanagedListRequestDeviceType struct {
	typeName                                                                   string
	DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
	DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
	DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
}

func NewDevicesUnmanagedListRequestDeviceTypeFromDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(value DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType) *DevicesUnmanagedListRequestDeviceType {
	return &DevicesUnmanagedListRequestDeviceType{typeName: "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType", DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType: value}
}

func NewDevicesUnmanagedListRequestDeviceTypeFromDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(value DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType) *DevicesUnmanagedListRequestDeviceType {
	return &DevicesUnmanagedListRequestDeviceType{typeName: "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType", DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType: value}
}

func NewDevicesUnmanagedListRequestDeviceTypeFromDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(value DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType) *DevicesUnmanagedListRequestDeviceType {
	return &DevicesUnmanagedListRequestDeviceType{typeName: "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType", DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType: value}
}

func (d *DevicesUnmanagedListRequestDeviceType) UnmarshalJSON(data []byte) error {
	var valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
	if err := json.Unmarshal(data, &valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType); err == nil {
		d.typeName = "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType"
		d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType = valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
		return nil
	}
	var valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
	if err := json.Unmarshal(data, &valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType); err == nil {
		d.typeName = "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType"
		d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType = valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
		return nil
	}
	var valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
	if err := json.Unmarshal(data, &valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType); err == nil {
		d.typeName = "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType"
		d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType = valueDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DevicesUnmanagedListRequestDeviceType) MarshalJSON() ([]byte, error) {
	switch d.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType":
		return json.Marshal(d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType)
	case "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType":
		return json.Marshal(d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType)
	case "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType":
		return json.Marshal(d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType)
	}
}

type DevicesUnmanagedListRequestDeviceTypeVisitor interface {
	VisitDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType) error
	VisitDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType) error
	VisitDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType) error
}

func (d *DevicesUnmanagedListRequestDeviceType) Accept(v DevicesUnmanagedListRequestDeviceTypeVisitor) error {
	switch d.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType":
		return v.VisitDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType)
	case "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType":
		return v.VisitDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType)
	case "devicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType":
		return v.VisitDevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType(d.DevicesUnmanagedListRequestDeviceTypeDevicesUnmanagedListRequestDeviceType)
	}
}
