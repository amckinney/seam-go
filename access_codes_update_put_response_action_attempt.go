// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type AccessCodesUpdatePutResponseActionAttempt struct {
	Status  string
	Success *AccessCodesUpdatePutResponseActionAttemptSuccess
	Pending *AccessCodesUpdatePutResponseActionAttemptPending
	Error   *AccessCodesUpdatePutResponseActionAttemptError
}

func NewAccessCodesUpdatePutResponseActionAttemptFromSuccess(value *AccessCodesUpdatePutResponseActionAttemptSuccess) *AccessCodesUpdatePutResponseActionAttempt {
	return &AccessCodesUpdatePutResponseActionAttempt{Status: "success", Success: value}
}

func NewAccessCodesUpdatePutResponseActionAttemptFromPending(value *AccessCodesUpdatePutResponseActionAttemptPending) *AccessCodesUpdatePutResponseActionAttempt {
	return &AccessCodesUpdatePutResponseActionAttempt{Status: "pending", Pending: value}
}

func NewAccessCodesUpdatePutResponseActionAttemptFromError(value *AccessCodesUpdatePutResponseActionAttemptError) *AccessCodesUpdatePutResponseActionAttempt {
	return &AccessCodesUpdatePutResponseActionAttempt{Status: "error", Error: value}
}

func (a *AccessCodesUpdatePutResponseActionAttempt) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Status string `json:"status"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Status = unmarshaler.Status
	switch unmarshaler.Status {
	case "success":
		value := new(AccessCodesUpdatePutResponseActionAttemptSuccess)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Success = value
	case "pending":
		value := new(AccessCodesUpdatePutResponseActionAttemptPending)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Pending = value
	case "error":
		value := new(AccessCodesUpdatePutResponseActionAttemptError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	}
	return nil
}

func (a AccessCodesUpdatePutResponseActionAttempt) MarshalJSON() ([]byte, error) {
	switch a.Status {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.Status, a)
	case "success":
		var marshaler = struct {
			Status string `json:"status"`
			*AccessCodesUpdatePutResponseActionAttemptSuccess
		}{
			Status: a.Status,
			AccessCodesUpdatePutResponseActionAttemptSuccess: a.Success,
		}
		return json.Marshal(marshaler)
	case "pending":
		var marshaler = struct {
			Status string `json:"status"`
			*AccessCodesUpdatePutResponseActionAttemptPending
		}{
			Status: a.Status,
			AccessCodesUpdatePutResponseActionAttemptPending: a.Pending,
		}
		return json.Marshal(marshaler)
	case "error":
		var marshaler = struct {
			Status string `json:"status"`
			*AccessCodesUpdatePutResponseActionAttemptError
		}{
			Status: a.Status,
			AccessCodesUpdatePutResponseActionAttemptError: a.Error,
		}
		return json.Marshal(marshaler)
	}
}

type AccessCodesUpdatePutResponseActionAttemptVisitor interface {
	VisitSuccess(*AccessCodesUpdatePutResponseActionAttemptSuccess) error
	VisitPending(*AccessCodesUpdatePutResponseActionAttemptPending) error
	VisitError(*AccessCodesUpdatePutResponseActionAttemptError) error
}

func (a *AccessCodesUpdatePutResponseActionAttempt) Accept(v AccessCodesUpdatePutResponseActionAttemptVisitor) error {
	switch a.Status {
	default:
		return fmt.Errorf("invalid type %s in %T", a.Status, a)
	case "success":
		return v.VisitSuccess(a.Success)
	case "pending":
		return v.VisitPending(a.Pending)
	case "error":
		return v.VisitError(a.Error)
	}
}
