// This file was auto-generated by Fern from our API Definition.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	core "github.com/seamapi/go/core"
	io "io"
	http "net/http"
)

type DevicesClient interface {
	Delete(ctx context.Context, request *DevicesDeleteRequest) (*DevicesDeleteResponse, error)
	Get(ctx context.Context, request *DevicesGetRequest) (*DevicesGetResponse, error)
	List(ctx context.Context, request *DevicesListRequest) (*DevicesListResponse, error)
	ListDeviceProviders(ctx context.Context, request *DevicesListDeviceProvidersRequest) (*DevicesListDeviceProvidersResponse, error)
	Update(ctx context.Context, request *DevicesUpdateRequest) (*DevicesUpdateResponse, error)
	Unmanaged() UnmanagedClient
}

func NewDevicesClient(opts ...core.ClientOption) DevicesClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &devicesClient{
		baseURL:         options.BaseURL,
		httpClient:      options.HTTPClient,
		header:          options.ToHeader(),
		unmanagedClient: NewUnmanagedClient(opts...),
	}
}

type devicesClient struct {
	baseURL         string
	httpClient      core.HTTPClient
	header          http.Header
	unmanagedClient UnmanagedClient
}

func (d *devicesClient) Delete(ctx context.Context, request *DevicesDeleteRequest) (*DevicesDeleteResponse, error) {
	baseURL := "https://connect.getseam.com"
	if d.baseURL != "" {
		baseURL = d.baseURL
	}
	endpointURL := baseURL + "/" + "devices/delete"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *DevicesDeleteResponse
	if err := core.DoRequest(
		ctx,
		d.httpClient,
		endpointURL,
		http.MethodDelete,
		request,
		&response,
		false,
		d.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (d *devicesClient) Get(ctx context.Context, request *DevicesGetRequest) (*DevicesGetResponse, error) {
	baseURL := "https://connect.getseam.com"
	if d.baseURL != "" {
		baseURL = d.baseURL
	}
	endpointURL := baseURL + "/" + "devices/get"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *DevicesGetResponse
	if err := core.DoRequest(
		ctx,
		d.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		d.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (d *devicesClient) List(ctx context.Context, request *DevicesListRequest) (*DevicesListResponse, error) {
	baseURL := "https://connect.getseam.com"
	if d.baseURL != "" {
		baseURL = d.baseURL
	}
	endpointURL := baseURL + "/" + "devices/list"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *DevicesListResponse
	if err := core.DoRequest(
		ctx,
		d.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		d.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (d *devicesClient) ListDeviceProviders(ctx context.Context, request *DevicesListDeviceProvidersRequest) (*DevicesListDeviceProvidersResponse, error) {
	baseURL := "https://connect.getseam.com"
	if d.baseURL != "" {
		baseURL = d.baseURL
	}
	endpointURL := baseURL + "/" + "devices/list_device_providers"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *DevicesListDeviceProvidersResponse
	if err := core.DoRequest(
		ctx,
		d.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		d.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (d *devicesClient) Update(ctx context.Context, request *DevicesUpdateRequest) (*DevicesUpdateResponse, error) {
	baseURL := "https://connect.getseam.com"
	if d.baseURL != "" {
		baseURL = d.baseURL
	}
	endpointURL := baseURL + "/" + "devices/update"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *DevicesUpdateResponse
	if err := core.DoRequest(
		ctx,
		d.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		d.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (d *devicesClient) Unmanaged() UnmanagedClient {
	return d.unmanagedClient
}
