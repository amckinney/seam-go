// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type ConnectedAccountsGetRequest struct {
	typeName                                      string
	ConnectedAccountsGetRequestConnectedAccountId *ConnectedAccountsGetRequestConnectedAccountId
	ConnectedAccountsGetRequestEmail              *ConnectedAccountsGetRequestEmail
}

func NewConnectedAccountsGetRequestFromConnectedAccountsGetRequestConnectedAccountId(value *ConnectedAccountsGetRequestConnectedAccountId) *ConnectedAccountsGetRequest {
	return &ConnectedAccountsGetRequest{typeName: "connectedAccountsGetRequestConnectedAccountId", ConnectedAccountsGetRequestConnectedAccountId: value}
}

func NewConnectedAccountsGetRequestFromConnectedAccountsGetRequestEmail(value *ConnectedAccountsGetRequestEmail) *ConnectedAccountsGetRequest {
	return &ConnectedAccountsGetRequest{typeName: "connectedAccountsGetRequestEmail", ConnectedAccountsGetRequestEmail: value}
}

func (c *ConnectedAccountsGetRequest) UnmarshalJSON(data []byte) error {
	valueConnectedAccountsGetRequestConnectedAccountId := new(ConnectedAccountsGetRequestConnectedAccountId)
	if err := json.Unmarshal(data, &valueConnectedAccountsGetRequestConnectedAccountId); err == nil {
		c.typeName = "connectedAccountsGetRequestConnectedAccountId"
		c.ConnectedAccountsGetRequestConnectedAccountId = valueConnectedAccountsGetRequestConnectedAccountId
		return nil
	}
	valueConnectedAccountsGetRequestEmail := new(ConnectedAccountsGetRequestEmail)
	if err := json.Unmarshal(data, &valueConnectedAccountsGetRequestEmail); err == nil {
		c.typeName = "connectedAccountsGetRequestEmail"
		c.ConnectedAccountsGetRequestEmail = valueConnectedAccountsGetRequestEmail
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountsGetRequest) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "connectedAccountsGetRequestConnectedAccountId":
		return json.Marshal(c.ConnectedAccountsGetRequestConnectedAccountId)
	case "connectedAccountsGetRequestEmail":
		return json.Marshal(c.ConnectedAccountsGetRequestEmail)
	}
}

type ConnectedAccountsGetRequestVisitor interface {
	VisitConnectedAccountsGetRequestConnectedAccountId(*ConnectedAccountsGetRequestConnectedAccountId) error
	VisitConnectedAccountsGetRequestEmail(*ConnectedAccountsGetRequestEmail) error
}

func (c *ConnectedAccountsGetRequest) Accept(v ConnectedAccountsGetRequestVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "connectedAccountsGetRequestConnectedAccountId":
		return v.VisitConnectedAccountsGetRequestConnectedAccountId(c.ConnectedAccountsGetRequestConnectedAccountId)
	case "connectedAccountsGetRequestEmail":
		return v.VisitConnectedAccountsGetRequestEmail(c.ConnectedAccountsGetRequestEmail)
	}
}
