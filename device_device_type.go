// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type DeviceDeviceType struct {
	typeName                         string
	DeviceDeviceTypeDeviceDeviceType DeviceDeviceTypeDeviceDeviceType
	DeviceDeviceTypeDeviceDeviceType DeviceDeviceTypeDeviceDeviceType
	DeviceDeviceTypeDeviceDeviceType DeviceDeviceTypeDeviceDeviceType
}

func NewDeviceDeviceTypeFromDeviceDeviceTypeDeviceDeviceType(value DeviceDeviceTypeDeviceDeviceType) *DeviceDeviceType {
	return &DeviceDeviceType{typeName: "deviceDeviceTypeDeviceDeviceType", DeviceDeviceTypeDeviceDeviceType: value}
}

func NewDeviceDeviceTypeFromDeviceDeviceTypeDeviceDeviceType(value DeviceDeviceTypeDeviceDeviceType) *DeviceDeviceType {
	return &DeviceDeviceType{typeName: "deviceDeviceTypeDeviceDeviceType", DeviceDeviceTypeDeviceDeviceType: value}
}

func NewDeviceDeviceTypeFromDeviceDeviceTypeDeviceDeviceType(value DeviceDeviceTypeDeviceDeviceType) *DeviceDeviceType {
	return &DeviceDeviceType{typeName: "deviceDeviceTypeDeviceDeviceType", DeviceDeviceTypeDeviceDeviceType: value}
}

func (d *DeviceDeviceType) UnmarshalJSON(data []byte) error {
	var valueDeviceDeviceTypeDeviceDeviceType DeviceDeviceTypeDeviceDeviceType
	if err := json.Unmarshal(data, &valueDeviceDeviceTypeDeviceDeviceType); err == nil {
		d.typeName = "deviceDeviceTypeDeviceDeviceType"
		d.DeviceDeviceTypeDeviceDeviceType = valueDeviceDeviceTypeDeviceDeviceType
		return nil
	}
	var valueDeviceDeviceTypeDeviceDeviceType DeviceDeviceTypeDeviceDeviceType
	if err := json.Unmarshal(data, &valueDeviceDeviceTypeDeviceDeviceType); err == nil {
		d.typeName = "deviceDeviceTypeDeviceDeviceType"
		d.DeviceDeviceTypeDeviceDeviceType = valueDeviceDeviceTypeDeviceDeviceType
		return nil
	}
	var valueDeviceDeviceTypeDeviceDeviceType DeviceDeviceTypeDeviceDeviceType
	if err := json.Unmarshal(data, &valueDeviceDeviceTypeDeviceDeviceType); err == nil {
		d.typeName = "deviceDeviceTypeDeviceDeviceType"
		d.DeviceDeviceTypeDeviceDeviceType = valueDeviceDeviceTypeDeviceDeviceType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, d)
}

func (d DeviceDeviceType) MarshalJSON() ([]byte, error) {
	switch d.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "deviceDeviceTypeDeviceDeviceType":
		return json.Marshal(d.DeviceDeviceTypeDeviceDeviceType)
	case "deviceDeviceTypeDeviceDeviceType":
		return json.Marshal(d.DeviceDeviceTypeDeviceDeviceType)
	case "deviceDeviceTypeDeviceDeviceType":
		return json.Marshal(d.DeviceDeviceTypeDeviceDeviceType)
	}
}

type DeviceDeviceTypeVisitor interface {
	VisitDeviceDeviceTypeDeviceDeviceType(DeviceDeviceTypeDeviceDeviceType) error
	VisitDeviceDeviceTypeDeviceDeviceType(DeviceDeviceTypeDeviceDeviceType) error
	VisitDeviceDeviceTypeDeviceDeviceType(DeviceDeviceTypeDeviceDeviceType) error
}

func (d *DeviceDeviceType) Accept(v DeviceDeviceTypeVisitor) error {
	switch d.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", d.typeName, d)
	case "deviceDeviceTypeDeviceDeviceType":
		return v.VisitDeviceDeviceTypeDeviceDeviceType(d.DeviceDeviceTypeDeviceDeviceType)
	case "deviceDeviceTypeDeviceDeviceType":
		return v.VisitDeviceDeviceTypeDeviceDeviceType(d.DeviceDeviceTypeDeviceDeviceType)
	case "deviceDeviceTypeDeviceDeviceType":
		return v.VisitDeviceDeviceTypeDeviceDeviceType(d.DeviceDeviceTypeDeviceDeviceType)
	}
}
