// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type ConnectedAccountCustomMetadataValue struct {
	typeName       string
	String         string
	Double         float64
	Boolean        bool
	StringOptional *string
}

func NewConnectedAccountCustomMetadataValueFromString(value string) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectedAccountCustomMetadataValueFromDouble(value float64) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "double", Double: value}
}

func NewConnectedAccountCustomMetadataValueFromBoolean(value bool) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func NewConnectedAccountCustomMetadataValueFromStringOptional(value *string) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "stringOptional", StringOptional: value}
}

func (c *ConnectedAccountCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		c.typeName = "double"
		c.Double = valueDouble
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		c.typeName = "stringOptional"
		c.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "double":
		return json.Marshal(c.Double)
	case "boolean":
		return json.Marshal(c.Boolean)
	case "stringOptional":
		return json.Marshal(c.StringOptional)
	}
}

type ConnectedAccountCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
	VisitBoolean(bool) error
	VisitStringOptional(*string) error
}

func (c *ConnectedAccountCustomMetadataValue) Accept(v ConnectedAccountCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "double":
		return v.VisitDouble(c.Double)
	case "boolean":
		return v.VisitBoolean(c.Boolean)
	case "stringOptional":
		return v.VisitStringOptional(c.StringOptional)
	}
}
