// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"
)

type EventsGetRequest struct {
	EventId   *string `json:"event_id,omitempty"`
	EventType *string `json:"event_type,omitempty"`
	DeviceId  *string `json:"device_id,omitempty"`
}

type EventsListRequest struct {
	Since              *string                           `json:"since,omitempty"`
	Between            []*EventsListRequestBetweenItem   `json:"between,omitempty"`
	DeviceId           *string                           `json:"device_id,omitempty"`
	DeviceIds          []string                          `json:"device_ids,omitempty"`
	AccessCodeId       *string                           `json:"access_code_id,omitempty"`
	AccessCodeIds      []string                          `json:"access_code_ids,omitempty"`
	EventType          *EventsListRequestEventType       `json:"event_type,omitempty"`
	EventTypes         []EventsListRequestEventTypesItem `json:"event_types,omitempty"`
	ConnectedAccountId *string                           `json:"connected_account_id,omitempty"`
}

type EventsGetResponse struct {
	Event   *Event  `json:"event,omitempty"`
	Message *string `json:"message,omitempty"`
	Ok      bool    `json:"ok"`
}

type EventsListRequestBetweenItem struct {
	typeName string
	String   string
	DateTime time.Time
}

func NewEventsListRequestBetweenItemFromString(value string) *EventsListRequestBetweenItem {
	return &EventsListRequestBetweenItem{typeName: "string", String: value}
}

func NewEventsListRequestBetweenItemFromDateTime(value time.Time) *EventsListRequestBetweenItem {
	return &EventsListRequestBetweenItem{typeName: "dateTime", DateTime: value}
}

func (e *EventsListRequestBetweenItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	var valueDateTime time.Time
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		e.typeName = "dateTime"
		e.DateTime = valueDateTime
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventsListRequestBetweenItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "dateTime":
		return json.Marshal(e.DateTime)
	}
}

type EventsListRequestBetweenItemVisitor interface {
	VisitString(string) error
	VisitDateTime(time.Time) error
}

func (e *EventsListRequestBetweenItem) Accept(visitor EventsListRequestBetweenItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return visitor.VisitString(e.String)
	case "dateTime":
		return visitor.VisitDateTime(e.DateTime)
	}
}

type EventsListRequestEventType string

const (
	EventsListRequestEventTypeDeviceConnected                             EventsListRequestEventType = "device.connected"
	EventsListRequestEventTypeDeviceUnmanagedConnected                    EventsListRequestEventType = "device.unmanaged.connected"
	EventsListRequestEventTypeDeviceDisconnected                          EventsListRequestEventType = "device.disconnected"
	EventsListRequestEventTypeDeviceUnmanagedDisconnected                 EventsListRequestEventType = "device.unmanaged.disconnected"
	EventsListRequestEventTypeDeviceConvertedToUnmanaged                  EventsListRequestEventType = "device.converted_to_unmanaged"
	EventsListRequestEventTypeDeviceUnmanagedConvertedToManaged           EventsListRequestEventType = "device.unmanaged.converted_to_managed"
	EventsListRequestEventTypeDeviceRemoved                               EventsListRequestEventType = "device.removed"
	EventsListRequestEventTypeDeviceTampered                              EventsListRequestEventType = "device.tampered"
	EventsListRequestEventTypeDeviceLowBattery                            EventsListRequestEventType = "device.low_battery"
	EventsListRequestEventTypeDeviceBatteryStatusChanged                  EventsListRequestEventType = "device.battery_status_changed"
	EventsListRequestEventTypeAccessCodeCreated                           EventsListRequestEventType = "access_code.created"
	EventsListRequestEventTypeAccessCodeChanged                           EventsListRequestEventType = "access_code.changed"
	EventsListRequestEventTypeAccessCodeScheduledOnDevice                 EventsListRequestEventType = "access_code.scheduled_on_device"
	EventsListRequestEventTypeAccessCodeSetOnDevice                       EventsListRequestEventType = "access_code.set_on_device"
	EventsListRequestEventTypeAccessCodeDeleted                           EventsListRequestEventType = "access_code.deleted"
	EventsListRequestEventTypeAccessCodeRemovedFromDevice                 EventsListRequestEventType = "access_code.removed_from_device"
	EventsListRequestEventTypeAccessCodeFailedToSetOnDevice               EventsListRequestEventType = "access_code.failed_to_set_on_device"
	EventsListRequestEventTypeAccessCodeDelayInSettingOnDevice            EventsListRequestEventType = "access_code.delay_in_setting_on_device"
	EventsListRequestEventTypeAccessCodeFailedToRemoveFromDevice          EventsListRequestEventType = "access_code.failed_to_remove_from_device"
	EventsListRequestEventTypeAccessCodeDelayInRemovingFromDevice         EventsListRequestEventType = "access_code.delay_in_removing_from_device"
	EventsListRequestEventTypeAccessCodeUnmanagedConvertedToManaged       EventsListRequestEventType = "access_code.unmanaged.converted_to_managed"
	EventsListRequestEventTypeAccessCodeUnmanagedFailedToConvertToManaged EventsListRequestEventType = "access_code.unmanaged.failed_to_convert_to_managed"
	EventsListRequestEventTypeAccessCodeUnmanagedCreated                  EventsListRequestEventType = "access_code.unmanaged.created"
	EventsListRequestEventTypeAccessCodeUnmanagedRemoved                  EventsListRequestEventType = "access_code.unmanaged.removed"
	EventsListRequestEventTypeLockLocked                                  EventsListRequestEventType = "lock.locked"
	EventsListRequestEventTypeLockUnlocked                                EventsListRequestEventType = "lock.unlocked"
	EventsListRequestEventTypeConnectedAccountConnected                   EventsListRequestEventType = "connected_account.connected"
	EventsListRequestEventTypeConnectedAccountCreated                     EventsListRequestEventType = "connected_account.created"
	EventsListRequestEventTypeConnectedAccountDisconnected                EventsListRequestEventType = "connected_account.disconnected"
	EventsListRequestEventTypeConnectedAccountCompletedFirstSync          EventsListRequestEventType = "connected_account.completed_first_sync"
	EventsListRequestEventTypeNoiseSensorNoiseThresholdTriggered          EventsListRequestEventType = "noise_sensor.noise_threshold_triggered"
	EventsListRequestEventTypeAccessCodeBackupAccessCodePulled            EventsListRequestEventType = "access_code.backup_access_code_pulled"
)

func NewEventsListRequestEventTypeFromString(s string) (EventsListRequestEventType, error) {
	switch s {
	case "device.connected":
		return EventsListRequestEventTypeDeviceConnected, nil
	case "device.unmanaged.connected":
		return EventsListRequestEventTypeDeviceUnmanagedConnected, nil
	case "device.disconnected":
		return EventsListRequestEventTypeDeviceDisconnected, nil
	case "device.unmanaged.disconnected":
		return EventsListRequestEventTypeDeviceUnmanagedDisconnected, nil
	case "device.converted_to_unmanaged":
		return EventsListRequestEventTypeDeviceConvertedToUnmanaged, nil
	case "device.unmanaged.converted_to_managed":
		return EventsListRequestEventTypeDeviceUnmanagedConvertedToManaged, nil
	case "device.removed":
		return EventsListRequestEventTypeDeviceRemoved, nil
	case "device.tampered":
		return EventsListRequestEventTypeDeviceTampered, nil
	case "device.low_battery":
		return EventsListRequestEventTypeDeviceLowBattery, nil
	case "device.battery_status_changed":
		return EventsListRequestEventTypeDeviceBatteryStatusChanged, nil
	case "access_code.created":
		return EventsListRequestEventTypeAccessCodeCreated, nil
	case "access_code.changed":
		return EventsListRequestEventTypeAccessCodeChanged, nil
	case "access_code.scheduled_on_device":
		return EventsListRequestEventTypeAccessCodeScheduledOnDevice, nil
	case "access_code.set_on_device":
		return EventsListRequestEventTypeAccessCodeSetOnDevice, nil
	case "access_code.deleted":
		return EventsListRequestEventTypeAccessCodeDeleted, nil
	case "access_code.removed_from_device":
		return EventsListRequestEventTypeAccessCodeRemovedFromDevice, nil
	case "access_code.failed_to_set_on_device":
		return EventsListRequestEventTypeAccessCodeFailedToSetOnDevice, nil
	case "access_code.delay_in_setting_on_device":
		return EventsListRequestEventTypeAccessCodeDelayInSettingOnDevice, nil
	case "access_code.failed_to_remove_from_device":
		return EventsListRequestEventTypeAccessCodeFailedToRemoveFromDevice, nil
	case "access_code.delay_in_removing_from_device":
		return EventsListRequestEventTypeAccessCodeDelayInRemovingFromDevice, nil
	case "access_code.unmanaged.converted_to_managed":
		return EventsListRequestEventTypeAccessCodeUnmanagedConvertedToManaged, nil
	case "access_code.unmanaged.failed_to_convert_to_managed":
		return EventsListRequestEventTypeAccessCodeUnmanagedFailedToConvertToManaged, nil
	case "access_code.unmanaged.created":
		return EventsListRequestEventTypeAccessCodeUnmanagedCreated, nil
	case "access_code.unmanaged.removed":
		return EventsListRequestEventTypeAccessCodeUnmanagedRemoved, nil
	case "lock.locked":
		return EventsListRequestEventTypeLockLocked, nil
	case "lock.unlocked":
		return EventsListRequestEventTypeLockUnlocked, nil
	case "connected_account.connected":
		return EventsListRequestEventTypeConnectedAccountConnected, nil
	case "connected_account.created":
		return EventsListRequestEventTypeConnectedAccountCreated, nil
	case "connected_account.disconnected":
		return EventsListRequestEventTypeConnectedAccountDisconnected, nil
	case "connected_account.completed_first_sync":
		return EventsListRequestEventTypeConnectedAccountCompletedFirstSync, nil
	case "noise_sensor.noise_threshold_triggered":
		return EventsListRequestEventTypeNoiseSensorNoiseThresholdTriggered, nil
	case "access_code.backup_access_code_pulled":
		return EventsListRequestEventTypeAccessCodeBackupAccessCodePulled, nil
	}
	var t EventsListRequestEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventsListRequestEventType) Ptr() *EventsListRequestEventType {
	return &e
}

type EventsListRequestEventTypesItem string

const (
	EventsListRequestEventTypesItemDeviceConnected                             EventsListRequestEventTypesItem = "device.connected"
	EventsListRequestEventTypesItemDeviceUnmanagedConnected                    EventsListRequestEventTypesItem = "device.unmanaged.connected"
	EventsListRequestEventTypesItemDeviceDisconnected                          EventsListRequestEventTypesItem = "device.disconnected"
	EventsListRequestEventTypesItemDeviceUnmanagedDisconnected                 EventsListRequestEventTypesItem = "device.unmanaged.disconnected"
	EventsListRequestEventTypesItemDeviceConvertedToUnmanaged                  EventsListRequestEventTypesItem = "device.converted_to_unmanaged"
	EventsListRequestEventTypesItemDeviceUnmanagedConvertedToManaged           EventsListRequestEventTypesItem = "device.unmanaged.converted_to_managed"
	EventsListRequestEventTypesItemDeviceRemoved                               EventsListRequestEventTypesItem = "device.removed"
	EventsListRequestEventTypesItemDeviceTampered                              EventsListRequestEventTypesItem = "device.tampered"
	EventsListRequestEventTypesItemDeviceLowBattery                            EventsListRequestEventTypesItem = "device.low_battery"
	EventsListRequestEventTypesItemDeviceBatteryStatusChanged                  EventsListRequestEventTypesItem = "device.battery_status_changed"
	EventsListRequestEventTypesItemAccessCodeCreated                           EventsListRequestEventTypesItem = "access_code.created"
	EventsListRequestEventTypesItemAccessCodeChanged                           EventsListRequestEventTypesItem = "access_code.changed"
	EventsListRequestEventTypesItemAccessCodeScheduledOnDevice                 EventsListRequestEventTypesItem = "access_code.scheduled_on_device"
	EventsListRequestEventTypesItemAccessCodeSetOnDevice                       EventsListRequestEventTypesItem = "access_code.set_on_device"
	EventsListRequestEventTypesItemAccessCodeDeleted                           EventsListRequestEventTypesItem = "access_code.deleted"
	EventsListRequestEventTypesItemAccessCodeRemovedFromDevice                 EventsListRequestEventTypesItem = "access_code.removed_from_device"
	EventsListRequestEventTypesItemAccessCodeFailedToSetOnDevice               EventsListRequestEventTypesItem = "access_code.failed_to_set_on_device"
	EventsListRequestEventTypesItemAccessCodeDelayInSettingOnDevice            EventsListRequestEventTypesItem = "access_code.delay_in_setting_on_device"
	EventsListRequestEventTypesItemAccessCodeFailedToRemoveFromDevice          EventsListRequestEventTypesItem = "access_code.failed_to_remove_from_device"
	EventsListRequestEventTypesItemAccessCodeDelayInRemovingFromDevice         EventsListRequestEventTypesItem = "access_code.delay_in_removing_from_device"
	EventsListRequestEventTypesItemAccessCodeUnmanagedConvertedToManaged       EventsListRequestEventTypesItem = "access_code.unmanaged.converted_to_managed"
	EventsListRequestEventTypesItemAccessCodeUnmanagedFailedToConvertToManaged EventsListRequestEventTypesItem = "access_code.unmanaged.failed_to_convert_to_managed"
	EventsListRequestEventTypesItemAccessCodeUnmanagedCreated                  EventsListRequestEventTypesItem = "access_code.unmanaged.created"
	EventsListRequestEventTypesItemAccessCodeUnmanagedRemoved                  EventsListRequestEventTypesItem = "access_code.unmanaged.removed"
	EventsListRequestEventTypesItemLockLocked                                  EventsListRequestEventTypesItem = "lock.locked"
	EventsListRequestEventTypesItemLockUnlocked                                EventsListRequestEventTypesItem = "lock.unlocked"
	EventsListRequestEventTypesItemConnectedAccountConnected                   EventsListRequestEventTypesItem = "connected_account.connected"
	EventsListRequestEventTypesItemConnectedAccountCreated                     EventsListRequestEventTypesItem = "connected_account.created"
	EventsListRequestEventTypesItemConnectedAccountDisconnected                EventsListRequestEventTypesItem = "connected_account.disconnected"
	EventsListRequestEventTypesItemConnectedAccountCompletedFirstSync          EventsListRequestEventTypesItem = "connected_account.completed_first_sync"
	EventsListRequestEventTypesItemNoiseSensorNoiseThresholdTriggered          EventsListRequestEventTypesItem = "noise_sensor.noise_threshold_triggered"
	EventsListRequestEventTypesItemAccessCodeBackupAccessCodePulled            EventsListRequestEventTypesItem = "access_code.backup_access_code_pulled"
)

func NewEventsListRequestEventTypesItemFromString(s string) (EventsListRequestEventTypesItem, error) {
	switch s {
	case "device.connected":
		return EventsListRequestEventTypesItemDeviceConnected, nil
	case "device.unmanaged.connected":
		return EventsListRequestEventTypesItemDeviceUnmanagedConnected, nil
	case "device.disconnected":
		return EventsListRequestEventTypesItemDeviceDisconnected, nil
	case "device.unmanaged.disconnected":
		return EventsListRequestEventTypesItemDeviceUnmanagedDisconnected, nil
	case "device.converted_to_unmanaged":
		return EventsListRequestEventTypesItemDeviceConvertedToUnmanaged, nil
	case "device.unmanaged.converted_to_managed":
		return EventsListRequestEventTypesItemDeviceUnmanagedConvertedToManaged, nil
	case "device.removed":
		return EventsListRequestEventTypesItemDeviceRemoved, nil
	case "device.tampered":
		return EventsListRequestEventTypesItemDeviceTampered, nil
	case "device.low_battery":
		return EventsListRequestEventTypesItemDeviceLowBattery, nil
	case "device.battery_status_changed":
		return EventsListRequestEventTypesItemDeviceBatteryStatusChanged, nil
	case "access_code.created":
		return EventsListRequestEventTypesItemAccessCodeCreated, nil
	case "access_code.changed":
		return EventsListRequestEventTypesItemAccessCodeChanged, nil
	case "access_code.scheduled_on_device":
		return EventsListRequestEventTypesItemAccessCodeScheduledOnDevice, nil
	case "access_code.set_on_device":
		return EventsListRequestEventTypesItemAccessCodeSetOnDevice, nil
	case "access_code.deleted":
		return EventsListRequestEventTypesItemAccessCodeDeleted, nil
	case "access_code.removed_from_device":
		return EventsListRequestEventTypesItemAccessCodeRemovedFromDevice, nil
	case "access_code.failed_to_set_on_device":
		return EventsListRequestEventTypesItemAccessCodeFailedToSetOnDevice, nil
	case "access_code.delay_in_setting_on_device":
		return EventsListRequestEventTypesItemAccessCodeDelayInSettingOnDevice, nil
	case "access_code.failed_to_remove_from_device":
		return EventsListRequestEventTypesItemAccessCodeFailedToRemoveFromDevice, nil
	case "access_code.delay_in_removing_from_device":
		return EventsListRequestEventTypesItemAccessCodeDelayInRemovingFromDevice, nil
	case "access_code.unmanaged.converted_to_managed":
		return EventsListRequestEventTypesItemAccessCodeUnmanagedConvertedToManaged, nil
	case "access_code.unmanaged.failed_to_convert_to_managed":
		return EventsListRequestEventTypesItemAccessCodeUnmanagedFailedToConvertToManaged, nil
	case "access_code.unmanaged.created":
		return EventsListRequestEventTypesItemAccessCodeUnmanagedCreated, nil
	case "access_code.unmanaged.removed":
		return EventsListRequestEventTypesItemAccessCodeUnmanagedRemoved, nil
	case "lock.locked":
		return EventsListRequestEventTypesItemLockLocked, nil
	case "lock.unlocked":
		return EventsListRequestEventTypesItemLockUnlocked, nil
	case "connected_account.connected":
		return EventsListRequestEventTypesItemConnectedAccountConnected, nil
	case "connected_account.created":
		return EventsListRequestEventTypesItemConnectedAccountCreated, nil
	case "connected_account.disconnected":
		return EventsListRequestEventTypesItemConnectedAccountDisconnected, nil
	case "connected_account.completed_first_sync":
		return EventsListRequestEventTypesItemConnectedAccountCompletedFirstSync, nil
	case "noise_sensor.noise_threshold_triggered":
		return EventsListRequestEventTypesItemNoiseSensorNoiseThresholdTriggered, nil
	case "access_code.backup_access_code_pulled":
		return EventsListRequestEventTypesItemAccessCodeBackupAccessCodePulled, nil
	}
	var t EventsListRequestEventTypesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EventsListRequestEventTypesItem) Ptr() *EventsListRequestEventTypesItem {
	return &e
}

type EventsListResponse struct {
	Events  []*Event `json:"events,omitempty"`
	Message *string  `json:"message,omitempty"`
	Ok      bool     `json:"ok"`
}
