// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"
)

type EventsListRequestBetweenItem struct {
	typeName string
	String   string
	DateTime time.Time
}

func NewEventsListRequestBetweenItemFromString(value string) *EventsListRequestBetweenItem {
	return &EventsListRequestBetweenItem{typeName: "string", String: value}
}

func NewEventsListRequestBetweenItemFromDateTime(value time.Time) *EventsListRequestBetweenItem {
	return &EventsListRequestBetweenItem{typeName: "dateTime", DateTime: value}
}

func (e *EventsListRequestBetweenItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	var valueDateTime time.Time
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		e.typeName = "dateTime"
		e.DateTime = valueDateTime
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventsListRequestBetweenItem) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "dateTime":
		return json.Marshal(e.DateTime)
	}
}

type EventsListRequestBetweenItemVisitor interface {
	VisitString(string) error
	VisitDateTime(time.Time) error
}

func (e *EventsListRequestBetweenItem) Accept(v EventsListRequestBetweenItemVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return v.VisitString(e.String)
	case "dateTime":
		return v.VisitDateTime(e.DateTime)
	}
}
