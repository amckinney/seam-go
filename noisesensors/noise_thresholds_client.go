// This file was auto-generated by Fern from our API Definition.

package noisesensors

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	seamapigo "github.com/seamapi/go"
	core "github.com/seamapi/go/core"
	io "io"
	http "net/http"
)

type NoiseThresholdsClient interface {
	Create(ctx context.Context, request *NoiseThresholdsCreateRequest) (*seamapigo.NoiseThresholdsCreateResponse, error)
	Delete(ctx context.Context, request *NoiseThresholdsDeleteRequest) (*seamapigo.NoiseThresholdsDeleteResponse, error)
	Get(ctx context.Context, request *NoiseThresholdsGetRequest) (*seamapigo.NoiseThresholdsGetResponse, error)
	List(ctx context.Context, request *NoiseThresholdsListRequest) (*seamapigo.NoiseThresholdsListResponse, error)
	Update(ctx context.Context, request *NoiseThresholdsUpdateRequest) (*seamapigo.NoiseThresholdsUpdateResponse, error)
}

func NewNoiseThresholdsClient(opts ...core.ClientOption) NoiseThresholdsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &noiseThresholdsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type noiseThresholdsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (n *noiseThresholdsClient) Create(ctx context.Context, request *NoiseThresholdsCreateRequest) (*seamapigo.NoiseThresholdsCreateResponse, error) {
	baseURL := "https://connect.getseam.com"
	if n.baseURL != "" {
		baseURL = n.baseURL
	}
	endpointURL := baseURL + "/" + "noise_sensors/noise_thresholds/create"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *seamapigo.NoiseThresholdsCreateResponse
	if err := core.DoRequest(
		ctx,
		n.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		n.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (n *noiseThresholdsClient) Delete(ctx context.Context, request *NoiseThresholdsDeleteRequest) (*seamapigo.NoiseThresholdsDeleteResponse, error) {
	baseURL := "https://connect.getseam.com"
	if n.baseURL != "" {
		baseURL = n.baseURL
	}
	endpointURL := baseURL + "/" + "noise_sensors/noise_thresholds/delete"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *seamapigo.NoiseThresholdsDeleteResponse
	if err := core.DoRequest(
		ctx,
		n.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		n.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (n *noiseThresholdsClient) Get(ctx context.Context, request *NoiseThresholdsGetRequest) (*seamapigo.NoiseThresholdsGetResponse, error) {
	baseURL := "https://connect.getseam.com"
	if n.baseURL != "" {
		baseURL = n.baseURL
	}
	endpointURL := baseURL + "/" + "noise_sensors/noise_thresholds/get"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *seamapigo.NoiseThresholdsGetResponse
	if err := core.DoRequest(
		ctx,
		n.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		n.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (n *noiseThresholdsClient) List(ctx context.Context, request *NoiseThresholdsListRequest) (*seamapigo.NoiseThresholdsListResponse, error) {
	baseURL := "https://connect.getseam.com"
	if n.baseURL != "" {
		baseURL = n.baseURL
	}
	endpointURL := baseURL + "/" + "noise_sensors/noise_thresholds/list"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *seamapigo.NoiseThresholdsListResponse
	if err := core.DoRequest(
		ctx,
		n.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		n.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (n *noiseThresholdsClient) Update(ctx context.Context, request *NoiseThresholdsUpdateRequest) (*seamapigo.NoiseThresholdsUpdateResponse, error) {
	baseURL := "https://connect.getseam.com"
	if n.baseURL != "" {
		baseURL = n.baseURL
	}
	endpointURL := baseURL + "/" + "noise_sensors/noise_thresholds/update"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *seamapigo.NoiseThresholdsUpdateResponse
	if err := core.DoRequest(
		ctx,
		n.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		n.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
