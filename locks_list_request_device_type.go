// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type LocksListRequestDeviceType struct {
	typeName                                             string
	LocksListRequestDeviceTypeLocksListRequestDeviceType LocksListRequestDeviceTypeLocksListRequestDeviceType
	LocksListRequestDeviceTypeLocksListRequestDeviceType LocksListRequestDeviceTypeLocksListRequestDeviceType
	LocksListRequestDeviceTypeLocksListRequestDeviceType LocksListRequestDeviceTypeLocksListRequestDeviceType
}

func NewLocksListRequestDeviceTypeFromLocksListRequestDeviceTypeLocksListRequestDeviceType(value LocksListRequestDeviceTypeLocksListRequestDeviceType) *LocksListRequestDeviceType {
	return &LocksListRequestDeviceType{typeName: "locksListRequestDeviceTypeLocksListRequestDeviceType", LocksListRequestDeviceTypeLocksListRequestDeviceType: value}
}

func NewLocksListRequestDeviceTypeFromLocksListRequestDeviceTypeLocksListRequestDeviceType(value LocksListRequestDeviceTypeLocksListRequestDeviceType) *LocksListRequestDeviceType {
	return &LocksListRequestDeviceType{typeName: "locksListRequestDeviceTypeLocksListRequestDeviceType", LocksListRequestDeviceTypeLocksListRequestDeviceType: value}
}

func NewLocksListRequestDeviceTypeFromLocksListRequestDeviceTypeLocksListRequestDeviceType(value LocksListRequestDeviceTypeLocksListRequestDeviceType) *LocksListRequestDeviceType {
	return &LocksListRequestDeviceType{typeName: "locksListRequestDeviceTypeLocksListRequestDeviceType", LocksListRequestDeviceTypeLocksListRequestDeviceType: value}
}

func (l *LocksListRequestDeviceType) UnmarshalJSON(data []byte) error {
	var valueLocksListRequestDeviceTypeLocksListRequestDeviceType LocksListRequestDeviceTypeLocksListRequestDeviceType
	if err := json.Unmarshal(data, &valueLocksListRequestDeviceTypeLocksListRequestDeviceType); err == nil {
		l.typeName = "locksListRequestDeviceTypeLocksListRequestDeviceType"
		l.LocksListRequestDeviceTypeLocksListRequestDeviceType = valueLocksListRequestDeviceTypeLocksListRequestDeviceType
		return nil
	}
	var valueLocksListRequestDeviceTypeLocksListRequestDeviceType LocksListRequestDeviceTypeLocksListRequestDeviceType
	if err := json.Unmarshal(data, &valueLocksListRequestDeviceTypeLocksListRequestDeviceType); err == nil {
		l.typeName = "locksListRequestDeviceTypeLocksListRequestDeviceType"
		l.LocksListRequestDeviceTypeLocksListRequestDeviceType = valueLocksListRequestDeviceTypeLocksListRequestDeviceType
		return nil
	}
	var valueLocksListRequestDeviceTypeLocksListRequestDeviceType LocksListRequestDeviceTypeLocksListRequestDeviceType
	if err := json.Unmarshal(data, &valueLocksListRequestDeviceTypeLocksListRequestDeviceType); err == nil {
		l.typeName = "locksListRequestDeviceTypeLocksListRequestDeviceType"
		l.LocksListRequestDeviceTypeLocksListRequestDeviceType = valueLocksListRequestDeviceTypeLocksListRequestDeviceType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, l)
}

func (l LocksListRequestDeviceType) MarshalJSON() ([]byte, error) {
	switch l.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "locksListRequestDeviceTypeLocksListRequestDeviceType":
		return json.Marshal(l.LocksListRequestDeviceTypeLocksListRequestDeviceType)
	case "locksListRequestDeviceTypeLocksListRequestDeviceType":
		return json.Marshal(l.LocksListRequestDeviceTypeLocksListRequestDeviceType)
	case "locksListRequestDeviceTypeLocksListRequestDeviceType":
		return json.Marshal(l.LocksListRequestDeviceTypeLocksListRequestDeviceType)
	}
}

type LocksListRequestDeviceTypeVisitor interface {
	VisitLocksListRequestDeviceTypeLocksListRequestDeviceType(LocksListRequestDeviceTypeLocksListRequestDeviceType) error
	VisitLocksListRequestDeviceTypeLocksListRequestDeviceType(LocksListRequestDeviceTypeLocksListRequestDeviceType) error
	VisitLocksListRequestDeviceTypeLocksListRequestDeviceType(LocksListRequestDeviceTypeLocksListRequestDeviceType) error
}

func (l *LocksListRequestDeviceType) Accept(v LocksListRequestDeviceTypeVisitor) error {
	switch l.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", l.typeName, l)
	case "locksListRequestDeviceTypeLocksListRequestDeviceType":
		return v.VisitLocksListRequestDeviceTypeLocksListRequestDeviceType(l.LocksListRequestDeviceTypeLocksListRequestDeviceType)
	case "locksListRequestDeviceTypeLocksListRequestDeviceType":
		return v.VisitLocksListRequestDeviceTypeLocksListRequestDeviceType(l.LocksListRequestDeviceTypeLocksListRequestDeviceType)
	case "locksListRequestDeviceTypeLocksListRequestDeviceType":
		return v.VisitLocksListRequestDeviceTypeLocksListRequestDeviceType(l.LocksListRequestDeviceTypeLocksListRequestDeviceType)
	}
}
