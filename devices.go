// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/seamapi/go/core"
	time "time"
)

type DevicesDeleteRequest struct {
	DeviceId string `json:"device_id"`
}

type DevicesGetRequest struct {
	DeviceId *string `json:"device_id,omitempty"`
	Name     *string `json:"name,omitempty"`
}

type DevicesListRequest struct {
	ConnectedAccountId  *string       `json:"connected_account_id,omitempty"`
	ConnectedAccountIds []string      `json:"connected_account_ids,omitempty"`
	ConnectWebviewId    *string       `json:"connect_webview_id,omitempty"`
	DeviceType          *DeviceType   `json:"device_type,omitempty"`
	DeviceTypes         []DeviceType  `json:"device_types,omitempty"`
	Manufacturer        *Manufacturer `json:"manufacturer,omitempty"`
	DeviceIds           []string      `json:"device_ids,omitempty"`
	Limit               *float64      `json:"limit,omitempty"`
	CreatedBefore       *time.Time    `json:"created_before,omitempty"`
}

type DevicesListDeviceProvidersRequest struct {
	ProviderCategory *DevicesListDeviceProvidersRequestProviderCategory `json:"provider_category,omitempty"`
}

type DevicesDeleteResponse struct {
	Ok bool `json:"ok"`

	_rawJSON json.RawMessage
}

func (d *DevicesDeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesDeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesDeleteResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesDeleteResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesGetResponse struct {
	Device *Device `json:"device,omitempty"`
	Ok     bool    `json:"ok"`

	_rawJSON json.RawMessage
}

func (d *DevicesGetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesGetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesGetResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesGetResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesListDeviceProvidersRequestProviderCategory string

const (
	DevicesListDeviceProvidersRequestProviderCategoryStable             DevicesListDeviceProvidersRequestProviderCategory = "stable"
	DevicesListDeviceProvidersRequestProviderCategoryConsumerSmartlocks DevicesListDeviceProvidersRequestProviderCategory = "consumer_smartlocks"
)

func NewDevicesListDeviceProvidersRequestProviderCategoryFromString(s string) (DevicesListDeviceProvidersRequestProviderCategory, error) {
	switch s {
	case "stable":
		return DevicesListDeviceProvidersRequestProviderCategoryStable, nil
	case "consumer_smartlocks":
		return DevicesListDeviceProvidersRequestProviderCategoryConsumerSmartlocks, nil
	}
	var t DevicesListDeviceProvidersRequestProviderCategory
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicesListDeviceProvidersRequestProviderCategory) Ptr() *DevicesListDeviceProvidersRequestProviderCategory {
	return &d
}

type DevicesListDeviceProvidersResponse struct {
	DeviceProviders []*DevicesListDeviceProvidersResponseDeviceProvidersItem `json:"device_providers,omitempty"`
	Ok              bool                                                     `json:"ok"`

	_rawJSON json.RawMessage
}

func (d *DevicesListDeviceProvidersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesListDeviceProvidersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesListDeviceProvidersResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesListDeviceProvidersResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesListResponse struct {
	Devices []*Device `json:"devices,omitempty"`
	Ok      bool      `json:"ok"`

	_rawJSON json.RawMessage
}

func (d *DevicesListResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesListResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesListResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesListResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesUpdateRequestLocation struct {
	_rawJSON json.RawMessage
}

func (d *DevicesUpdateRequestLocation) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesUpdateRequestLocation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesUpdateRequestLocation(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesUpdateRequestLocation) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesUpdateRequestProperties struct {
	Name *string `json:"name,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DevicesUpdateRequestProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesUpdateRequestProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesUpdateRequestProperties(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesUpdateRequestProperties) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesUpdateResponse struct {
	Ok bool `json:"ok"`

	_rawJSON json.RawMessage
}

func (d *DevicesUpdateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DevicesUpdateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DevicesUpdateResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DevicesUpdateResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DevicesUpdateRequest struct {
	DeviceId   string                          `json:"device_id"`
	Properties *DevicesUpdateRequestProperties `json:"properties,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Location   *DevicesUpdateRequestLocation   `json:"location,omitempty"`
	IsManaged  *bool                           `json:"is_managed,omitempty"`
}
