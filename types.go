// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	time "time"
)

type AccessCode struct {
	CommonCodeKey               *string          `json:"common_code_key,omitempty"`
	IsScheduledOnDevice         *bool            `json:"is_scheduled_on_device,omitempty"`
	Type                        AccessCodeType   `json:"type,omitempty"`
	IsWaitingForCodeAssignment  *bool            `json:"is_waiting_for_code_assignment,omitempty"`
	AccessCodeId                string           `json:"access_code_id"`
	DeviceId                    string           `json:"device_id"`
	Name                        *string          `json:"name,omitempty"`
	Code                        *string          `json:"code,omitempty"`
	CreatedAt                   time.Time        `json:"created_at"`
	Errors                      interface{}      `json:"errors,omitempty"`
	Warnings                    interface{}      `json:"warnings,omitempty"`
	IsManaged                   bool             `json:"is_managed"`
	StartsAt                    *time.Time       `json:"starts_at,omitempty"`
	EndsAt                      *time.Time       `json:"ends_at,omitempty"`
	Status                      AccessCodeStatus `json:"status,omitempty"`
	IsBackupAccessCodeAvailable bool             `json:"is_backup_access_code_available"`
	IsBackup                    *bool            `json:"is_backup,omitempty"`
	PulledBackupAccessCodeId    *string          `json:"pulled_backup_access_code_id,omitempty"`
}

type AccessCodeStatus string

const (
	AccessCodeStatusSetting  AccessCodeStatus = "setting"
	AccessCodeStatusSet      AccessCodeStatus = "set"
	AccessCodeStatusUnset    AccessCodeStatus = "unset"
	AccessCodeStatusRemoving AccessCodeStatus = "removing"
	AccessCodeStatusUnknown  AccessCodeStatus = "unknown"
)

func NewAccessCodeStatusFromString(s string) (AccessCodeStatus, error) {
	switch s {
	case "setting":
		return AccessCodeStatusSetting, nil
	case "set":
		return AccessCodeStatusSet, nil
	case "unset":
		return AccessCodeStatusUnset, nil
	case "removing":
		return AccessCodeStatusRemoving, nil
	case "unknown":
		return AccessCodeStatusUnknown, nil
	}
	var t AccessCodeStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodeStatus) Ptr() *AccessCodeStatus {
	return &a
}

type AccessCodeType string

const (
	AccessCodeTypeTimeBound AccessCodeType = "time_bound"
	AccessCodeTypeOngoing   AccessCodeType = "ongoing"
)

func NewAccessCodeTypeFromString(s string) (AccessCodeType, error) {
	switch s {
	case "time_bound":
		return AccessCodeTypeTimeBound, nil
	case "ongoing":
		return AccessCodeTypeOngoing, nil
	}
	var t AccessCodeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AccessCodeType) Ptr() *AccessCodeType {
	return &a
}

type ActionAttempt struct {
	Status  string
	Success *ActionAttemptSuccess
	Pending *ActionAttemptPending
	Error   *ActionAttemptError
}

func NewActionAttemptFromSuccess(value *ActionAttemptSuccess) *ActionAttempt {
	return &ActionAttempt{Status: "success", Success: value}
}

func NewActionAttemptFromPending(value *ActionAttemptPending) *ActionAttempt {
	return &ActionAttempt{Status: "pending", Pending: value}
}

func NewActionAttemptFromError(value *ActionAttemptError) *ActionAttempt {
	return &ActionAttempt{Status: "error", Error: value}
}

func (a *ActionAttempt) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Status string `json:"status"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Status = unmarshaler.Status
	switch unmarshaler.Status {
	case "success":
		value := new(ActionAttemptSuccess)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Success = value
	case "pending":
		value := new(ActionAttemptPending)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Pending = value
	case "error":
		value := new(ActionAttemptError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	}
	return nil
}

func (a ActionAttempt) MarshalJSON() ([]byte, error) {
	switch a.Status {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.Status, a)
	case "success":
		var marshaler = struct {
			Status string `json:"status"`
			*ActionAttemptSuccess
		}{
			Status:               a.Status,
			ActionAttemptSuccess: a.Success,
		}
		return json.Marshal(marshaler)
	case "pending":
		var marshaler = struct {
			Status string `json:"status"`
			*ActionAttemptPending
		}{
			Status:               a.Status,
			ActionAttemptPending: a.Pending,
		}
		return json.Marshal(marshaler)
	case "error":
		var marshaler = struct {
			Status string `json:"status"`
			*ActionAttemptError
		}{
			Status:             a.Status,
			ActionAttemptError: a.Error,
		}
		return json.Marshal(marshaler)
	}
}

type ActionAttemptVisitor interface {
	VisitSuccess(*ActionAttemptSuccess) error
	VisitPending(*ActionAttemptPending) error
	VisitError(*ActionAttemptError) error
}

func (a *ActionAttempt) Accept(visitor ActionAttemptVisitor) error {
	switch a.Status {
	default:
		return fmt.Errorf("invalid type %s in %T", a.Status, a)
	case "success":
		return visitor.VisitSuccess(a.Success)
	case "pending":
		return visitor.VisitPending(a.Pending)
	case "error":
		return visitor.VisitError(a.Error)
	}
}

type ActionAttemptError struct {
	ActionType      string                   `json:"action_type"`
	ActionAttemptId string                   `json:"action_attempt_id"`
	Result          *string                  `json:"result,omitempty"`
	Error           *ActionAttemptErrorError `json:"error,omitempty"`
}

type ActionAttemptErrorError struct {
	Type    string `json:"type"`
	Message string `json:"message"`
}

type ActionAttemptPending struct {
	ActionType      string  `json:"action_type"`
	ActionAttemptId string  `json:"action_attempt_id"`
	Result          *string `json:"result,omitempty"`
	Error           *string `json:"error,omitempty"`
}

type ActionAttemptSuccess struct {
	ActionType      string      `json:"action_type"`
	ActionAttemptId string      `json:"action_attempt_id"`
	Result          interface{} `json:"result,omitempty"`
	Error           *string     `json:"error,omitempty"`
}

type AugustDeviceMetadata struct {
	LockId             string  `json:"lock_id"`
	LockName           string  `json:"lock_name"`
	HouseName          string  `json:"house_name"`
	HouseId            *string `json:"house_id,omitempty"`
	HasKeypad          bool    `json:"has_keypad"`
	Model              *string `json:"model,omitempty"`
	KeypadBatteryLevel *string `json:"keypad_battery_level,omitempty"`
}

type ClientSession struct {
	ClientSessionId     string    `json:"client_session_id"`
	UserIdentifierKey   *string   `json:"user_identifier_key,omitempty"`
	CreatedAt           time.Time `json:"created_at"`
	Token               string    `json:"token"`
	DeviceCount         float64   `json:"device_count"`
	ConnectedAccountIds []string  `json:"connected_account_ids,omitempty"`
	ConnectWebviewIds   []string  `json:"connect_webview_ids,omitempty"`
	WorkspaceId         string    `json:"workspace_id"`
}

type ClimateSettingSchedule struct {
	ClimateSettingScheduleId  string                                 `json:"climate_setting_schedule_id"`
	DeviceId                  string                                 `json:"device_id"`
	Name                      *string                                `json:"name,omitempty"`
	ScheduleStartsAt          string                                 `json:"schedule_starts_at"`
	ScheduleEndsAt            string                                 `json:"schedule_ends_at"`
	CreatedAt                 time.Time                              `json:"created_at"`
	AutomaticHeatingEnabled   *bool                                  `json:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool                                  `json:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *ClimateSettingScheduleHvacModeSetting `json:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64                               `json:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64                               `json:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64                               `json:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64                               `json:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool                                  `json:"manual_override_allowed,omitempty"`
	scheduleType              string
}

func (c *ClimateSettingSchedule) ScheduleType() string {
	return c.scheduleType
}

func (c *ClimateSettingSchedule) UnmarshalJSON(data []byte) error {
	type unmarshaler ClimateSettingSchedule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClimateSettingSchedule(value)
	c.scheduleType = "time_bound"
	return nil
}

func (c *ClimateSettingSchedule) MarshalJSON() ([]byte, error) {
	type embed ClimateSettingSchedule
	var marshaler = struct {
		embed
		ScheduleType string `json:"schedule_type"`
	}{
		embed:        embed(*c),
		ScheduleType: "time_bound",
	}
	return json.Marshal(marshaler)
}

type ClimateSettingScheduleHvacModeSetting string

const (
	ClimateSettingScheduleHvacModeSettingOff      ClimateSettingScheduleHvacModeSetting = "off"
	ClimateSettingScheduleHvacModeSettingHeat     ClimateSettingScheduleHvacModeSetting = "heat"
	ClimateSettingScheduleHvacModeSettingCool     ClimateSettingScheduleHvacModeSetting = "cool"
	ClimateSettingScheduleHvacModeSettingHeatcool ClimateSettingScheduleHvacModeSetting = "heatcool"
)

func NewClimateSettingScheduleHvacModeSettingFromString(s string) (ClimateSettingScheduleHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingScheduleHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingScheduleHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingScheduleHvacModeSettingCool, nil
	case "heatcool":
		return ClimateSettingScheduleHvacModeSettingHeatcool, nil
	}
	var t ClimateSettingScheduleHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingScheduleHvacModeSetting) Ptr() *ClimateSettingScheduleHvacModeSetting {
	return &c
}

type ClimateSettingSchedulesCreateRequestHvacModeSetting string

const (
	ClimateSettingSchedulesCreateRequestHvacModeSettingOff      ClimateSettingSchedulesCreateRequestHvacModeSetting = "off"
	ClimateSettingSchedulesCreateRequestHvacModeSettingHeat     ClimateSettingSchedulesCreateRequestHvacModeSetting = "heat"
	ClimateSettingSchedulesCreateRequestHvacModeSettingCool     ClimateSettingSchedulesCreateRequestHvacModeSetting = "cool"
	ClimateSettingSchedulesCreateRequestHvacModeSettingHeatcool ClimateSettingSchedulesCreateRequestHvacModeSetting = "heatcool"
)

func NewClimateSettingSchedulesCreateRequestHvacModeSettingFromString(s string) (ClimateSettingSchedulesCreateRequestHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingCool, nil
	case "heatcool":
		return ClimateSettingSchedulesCreateRequestHvacModeSettingHeatcool, nil
	}
	var t ClimateSettingSchedulesCreateRequestHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingSchedulesCreateRequestHvacModeSetting) Ptr() *ClimateSettingSchedulesCreateRequestHvacModeSetting {
	return &c
}

type ClimateSettingSchedulesCreateResponse struct {
	ClimateSettingSchedule *ClimateSettingSchedule `json:"climate_setting_schedule,omitempty"`
	Ok                     bool                    `json:"ok"`
}

type ClimateSettingSchedulesDeleteResponse struct {
	Ok bool `json:"ok"`
}

type ClimateSettingSchedulesGetResponse struct {
	ClimateSettingSchedule *ClimateSettingSchedule `json:"climate_setting_schedule,omitempty"`
	Ok                     bool                    `json:"ok"`
}

type ClimateSettingSchedulesListResponse struct {
	ClimateSettingSchedules []*ClimateSettingSchedule `json:"climate_setting_schedules,omitempty"`
	Ok                      bool                      `json:"ok"`
}

type ClimateSettingSchedulesUpdateRequestHvacModeSetting string

const (
	ClimateSettingSchedulesUpdateRequestHvacModeSettingOff      ClimateSettingSchedulesUpdateRequestHvacModeSetting = "off"
	ClimateSettingSchedulesUpdateRequestHvacModeSettingHeat     ClimateSettingSchedulesUpdateRequestHvacModeSetting = "heat"
	ClimateSettingSchedulesUpdateRequestHvacModeSettingCool     ClimateSettingSchedulesUpdateRequestHvacModeSetting = "cool"
	ClimateSettingSchedulesUpdateRequestHvacModeSettingHeatcool ClimateSettingSchedulesUpdateRequestHvacModeSetting = "heatcool"
)

func NewClimateSettingSchedulesUpdateRequestHvacModeSettingFromString(s string) (ClimateSettingSchedulesUpdateRequestHvacModeSetting, error) {
	switch s {
	case "off":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingOff, nil
	case "heat":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingHeat, nil
	case "cool":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingCool, nil
	case "heatcool":
		return ClimateSettingSchedulesUpdateRequestHvacModeSettingHeatcool, nil
	}
	var t ClimateSettingSchedulesUpdateRequestHvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClimateSettingSchedulesUpdateRequestHvacModeSetting) Ptr() *ClimateSettingSchedulesUpdateRequestHvacModeSetting {
	return &c
}

type ClimateSettingSchedulesUpdateResponse struct {
	ClimateSettingSchedule *ClimateSettingSchedule `json:"climate_setting_schedule,omitempty"`
	Ok                     bool                    `json:"ok"`
}

type ConnectWebview struct {
	ConnectWebviewId    string                            `json:"connect_webview_id"`
	ConnectedAccountId  *string                           `json:"connected_account_id,omitempty"`
	Url                 string                            `json:"url"`
	WorkspaceId         string                            `json:"workspace_id"`
	DeviceSelectionMode ConnectWebviewDeviceSelectionMode `json:"device_selection_mode,omitempty"`
	AcceptedProviders   []string                          `json:"accepted_providers,omitempty"`
	AcceptedDevices     []string                          `json:"accepted_devices,omitempty"`
	AnyProviderAllowed  bool                              `json:"any_provider_allowed"`
	AnyDeviceAllowed    bool                              `json:"any_device_allowed"`
	CreatedAt           time.Time                         `json:"created_at"`
	LoginSuccessful     bool                              `json:"login_successful"`
	Status              ConnectWebviewStatus              `json:"status,omitempty"`
}

type ConnectWebviewDeviceSelectionMode string

const (
	ConnectWebviewDeviceSelectionModeNone     ConnectWebviewDeviceSelectionMode = "none"
	ConnectWebviewDeviceSelectionModeSingle   ConnectWebviewDeviceSelectionMode = "single"
	ConnectWebviewDeviceSelectionModeMultiple ConnectWebviewDeviceSelectionMode = "multiple"
)

func NewConnectWebviewDeviceSelectionModeFromString(s string) (ConnectWebviewDeviceSelectionMode, error) {
	switch s {
	case "none":
		return ConnectWebviewDeviceSelectionModeNone, nil
	case "single":
		return ConnectWebviewDeviceSelectionModeSingle, nil
	case "multiple":
		return ConnectWebviewDeviceSelectionModeMultiple, nil
	}
	var t ConnectWebviewDeviceSelectionMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectWebviewDeviceSelectionMode) Ptr() *ConnectWebviewDeviceSelectionMode {
	return &c
}

type ConnectWebviewStatus string

const (
	ConnectWebviewStatusPending    ConnectWebviewStatus = "pending"
	ConnectWebviewStatusFailed     ConnectWebviewStatus = "failed"
	ConnectWebviewStatusAuthorized ConnectWebviewStatus = "authorized"
)

func NewConnectWebviewStatusFromString(s string) (ConnectWebviewStatus, error) {
	switch s {
	case "pending":
		return ConnectWebviewStatusPending, nil
	case "failed":
		return ConnectWebviewStatusFailed, nil
	case "authorized":
		return ConnectWebviewStatusAuthorized, nil
	}
	var t ConnectWebviewStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectWebviewStatus) Ptr() *ConnectWebviewStatus {
	return &c
}

type ConnectedAccount struct {
	ConnectedAccountId *string                                         `json:"connected_account_id,omitempty"`
	CreatedAt          *time.Time                                      `json:"created_at,omitempty"`
	UserIdentifier     *ConnectedAccountUserIdentifier                 `json:"user_identifier,omitempty"`
	AccountType        *string                                         `json:"account_type,omitempty"`
	Errors             interface{}                                     `json:"errors,omitempty"`
	Warnings           interface{}                                     `json:"warnings,omitempty"`
	CustomMetadata     map[string]*ConnectedAccountCustomMetadataValue `json:"custom_metadata,omitempty"`
}

type ConnectedAccountCustomMetadataValue struct {
	typeName       string
	String         string
	Double         float64
	Boolean        bool
	StringOptional *string
}

func NewConnectedAccountCustomMetadataValueFromString(value string) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "string", String: value}
}

func NewConnectedAccountCustomMetadataValueFromDouble(value float64) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "double", Double: value}
}

func NewConnectedAccountCustomMetadataValueFromBoolean(value bool) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "boolean", Boolean: value}
}

func NewConnectedAccountCustomMetadataValueFromStringOptional(value *string) *ConnectedAccountCustomMetadataValue {
	return &ConnectedAccountCustomMetadataValue{typeName: "stringOptional", StringOptional: value}
}

func (c *ConnectedAccountCustomMetadataValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		c.typeName = "double"
		c.Double = valueDouble
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		c.typeName = "stringOptional"
		c.StringOptional = valueStringOptional
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectedAccountCustomMetadataValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "double":
		return json.Marshal(c.Double)
	case "boolean":
		return json.Marshal(c.Boolean)
	case "stringOptional":
		return json.Marshal(c.StringOptional)
	}
}

type ConnectedAccountCustomMetadataValueVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
	VisitBoolean(bool) error
	VisitStringOptional(*string) error
}

func (c *ConnectedAccountCustomMetadataValue) Accept(visitor ConnectedAccountCustomMetadataValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return visitor.VisitString(c.String)
	case "double":
		return visitor.VisitDouble(c.Double)
	case "boolean":
		return visitor.VisitBoolean(c.Boolean)
	case "stringOptional":
		return visitor.VisitStringOptional(c.StringOptional)
	}
}

type ConnectedAccountUserIdentifier struct {
	Username  *string `json:"username,omitempty"`
	ApiUrl    *string `json:"api_url,omitempty"`
	Email     *string `json:"email,omitempty"`
	Phone     *string `json:"phone,omitempty"`
	Exclusive *bool   `json:"exclusive,omitempty"`
}

type ConnectedAccountsGetRequestConnectedAccountId struct {
	ConnectedAccountId string `json:"connected_account_id"`
}

type ConnectedAccountsGetRequestEmail struct {
	Email string `json:"email"`
}

type CurrentClimateSetting struct {
	AutomaticHeatingEnabled   *bool    `json:"automatic_heating_enabled,omitempty"`
	AutomaticCoolingEnabled   *bool    `json:"automatic_cooling_enabled,omitempty"`
	HvacModeSetting           *string  `json:"hvac_mode_setting,omitempty"`
	CoolingSetPointCelsius    *float64 `json:"cooling_set_point_celsius,omitempty"`
	HeatingSetPointCelsius    *float64 `json:"heating_set_point_celsius,omitempty"`
	CoolingSetPointFahrenheit *float64 `json:"cooling_set_point_fahrenheit,omitempty"`
	HeatingSetPointFahrenheit *float64 `json:"heating_set_point_fahrenheit,omitempty"`
	ManualOverrideAllowed     *bool    `json:"manual_override_allowed,omitempty"`
}

type Device struct {
	DeviceId              string                            `json:"device_id"`
	DeviceType            DeviceType                        `json:"device_type,omitempty"`
	CapabilitiesSupported []DeviceCapabilitiesSupportedItem `json:"capabilities_supported,omitempty"`
	Properties            *DeviceProperties                 `json:"properties,omitempty"`
	Location              interface{}                       `json:"location,omitempty"`
	ConnectedAccountId    string                            `json:"connected_account_id"`
	WorkspaceId           string                            `json:"workspace_id"`
	Errors                []*DeviceErrorsItem               `json:"errors,omitempty"`
	Warnings              []*DeviceWarningsItem             `json:"warnings,omitempty"`
	CreatedAt             time.Time                         `json:"created_at"`
	IsManaged             bool                              `json:"is_managed"`
}

type DeviceCapabilitiesSupportedItem string

const (
	DeviceCapabilitiesSupportedItemAccessCode     DeviceCapabilitiesSupportedItem = "access_code"
	DeviceCapabilitiesSupportedItemLock           DeviceCapabilitiesSupportedItem = "lock"
	DeviceCapabilitiesSupportedItemNoiseDetection DeviceCapabilitiesSupportedItem = "noise_detection"
	DeviceCapabilitiesSupportedItemThermostat     DeviceCapabilitiesSupportedItem = "thermostat"
	DeviceCapabilitiesSupportedItemBattery        DeviceCapabilitiesSupportedItem = "battery"
)

func NewDeviceCapabilitiesSupportedItemFromString(s string) (DeviceCapabilitiesSupportedItem, error) {
	switch s {
	case "access_code":
		return DeviceCapabilitiesSupportedItemAccessCode, nil
	case "lock":
		return DeviceCapabilitiesSupportedItemLock, nil
	case "noise_detection":
		return DeviceCapabilitiesSupportedItemNoiseDetection, nil
	case "thermostat":
		return DeviceCapabilitiesSupportedItemThermostat, nil
	case "battery":
		return DeviceCapabilitiesSupportedItemBattery, nil
	}
	var t DeviceCapabilitiesSupportedItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceCapabilitiesSupportedItem) Ptr() *DeviceCapabilitiesSupportedItem {
	return &d
}

type DeviceErrorsItem struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`
}

type DeviceProperties struct {
	Online                bool                   `json:"online"`
	Name                  string                 `json:"name"`
	Model                 *DevicePropertiesModel `json:"model,omitempty"`
	AugustMetadata        *AugustDeviceMetadata  `json:"august_metadata,omitempty"`
	SchlageMetadata       *SchlageDeviceMetadata `json:"schlage_metadata,omitempty"`
	SmartthingsMetadata   interface{}            `json:"smartthings_metadata,omitempty"`
	CurrentClimateSetting *CurrentClimateSetting `json:"current_climate_setting,omitempty"`
}

type DevicePropertiesModel struct {
	DisplayName string `json:"display_name"`
}

type DeviceType string

const (
	DeviceTypeAkuvoxLock             DeviceType = "akuvox_lock"
	DeviceTypeAugustLock             DeviceType = "august_lock"
	DeviceTypeBrivoAccessPoint       DeviceType = "brivo_access_point"
	DeviceTypeButterflymxPanel       DeviceType = "butterflymx_panel"
	DeviceTypeDoorkingLock           DeviceType = "doorking_lock"
	DeviceTypeGenieDoor              DeviceType = "genie_door"
	DeviceTypeIglooLock              DeviceType = "igloo_lock"
	DeviceTypeLinearLock             DeviceType = "linear_lock"
	DeviceTypeLocklyLock             DeviceType = "lockly_lock"
	DeviceTypeKwiksetLock            DeviceType = "kwikset_lock"
	DeviceTypeNukiLock               DeviceType = "nuki_lock"
	DeviceTypeSaltoLock              DeviceType = "salto_lock"
	DeviceTypeSchlageLock            DeviceType = "schlage_lock"
	DeviceTypeSeamRelay              DeviceType = "seam_relay"
	DeviceTypeSmartthingsLock        DeviceType = "smartthings_lock"
	DeviceTypeYaleLock               DeviceType = "yale_lock"
	DeviceTypeTwoNIntercom           DeviceType = "two_n_intercom"
	DeviceTypeControlbywebDevice     DeviceType = "controlbyweb_device"
	DeviceTypeTtlockLock             DeviceType = "ttlock_lock"
	DeviceTypeIgloohomeLock          DeviceType = "igloohome_lock"
	DeviceTypeHubitatLock            DeviceType = "hubitat_lock"
	DeviceTypeNoiseawareActivityZone DeviceType = "noiseaware_activity_zone"
	DeviceTypeMinutSensor            DeviceType = "minut_sensor"
	DeviceTypeEcobeeThermostat       DeviceType = "ecobee_thermostat"
	DeviceTypeNestThermostat         DeviceType = "nest_thermostat"
)

func NewDeviceTypeFromString(s string) (DeviceType, error) {
	switch s {
	case "akuvox_lock":
		return DeviceTypeAkuvoxLock, nil
	case "august_lock":
		return DeviceTypeAugustLock, nil
	case "brivo_access_point":
		return DeviceTypeBrivoAccessPoint, nil
	case "butterflymx_panel":
		return DeviceTypeButterflymxPanel, nil
	case "doorking_lock":
		return DeviceTypeDoorkingLock, nil
	case "genie_door":
		return DeviceTypeGenieDoor, nil
	case "igloo_lock":
		return DeviceTypeIglooLock, nil
	case "linear_lock":
		return DeviceTypeLinearLock, nil
	case "lockly_lock":
		return DeviceTypeLocklyLock, nil
	case "kwikset_lock":
		return DeviceTypeKwiksetLock, nil
	case "nuki_lock":
		return DeviceTypeNukiLock, nil
	case "salto_lock":
		return DeviceTypeSaltoLock, nil
	case "schlage_lock":
		return DeviceTypeSchlageLock, nil
	case "seam_relay":
		return DeviceTypeSeamRelay, nil
	case "smartthings_lock":
		return DeviceTypeSmartthingsLock, nil
	case "yale_lock":
		return DeviceTypeYaleLock, nil
	case "two_n_intercom":
		return DeviceTypeTwoNIntercom, nil
	case "controlbyweb_device":
		return DeviceTypeControlbywebDevice, nil
	case "ttlock_lock":
		return DeviceTypeTtlockLock, nil
	case "igloohome_lock":
		return DeviceTypeIgloohomeLock, nil
	case "hubitat_lock":
		return DeviceTypeHubitatLock, nil
	case "noiseaware_activity_zone":
		return DeviceTypeNoiseawareActivityZone, nil
	case "minut_sensor":
		return DeviceTypeMinutSensor, nil
	case "ecobee_thermostat":
		return DeviceTypeEcobeeThermostat, nil
	case "nest_thermostat":
		return DeviceTypeNestThermostat, nil
	}
	var t DeviceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DeviceType) Ptr() *DeviceType {
	return &d
}

type DeviceWarningsItem struct {
	WarningCode string `json:"warning_code"`
	Message     string `json:"message"`
}

type DevicesListDeviceProvidersResponseDeviceProvidersItem struct {
	DeviceProviderName string                                                                        `json:"device_provider_name"`
	DisplayName        string                                                                        `json:"display_name"`
	ImageUrl           string                                                                        `json:"image_url"`
	ProviderCategories []DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem `json:"provider_categories,omitempty"`
}

type DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem string

const (
	DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItemStable             DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem = "stable"
	DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItemConsumerSmartlocks DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem = "consumer_smartlocks"
)

func NewDevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItemFromString(s string) (DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem, error) {
	switch s {
	case "stable":
		return DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItemStable, nil
	case "consumer_smartlocks":
		return DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItemConsumerSmartlocks, nil
	}
	var t DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem) Ptr() *DevicesListDeviceProvidersResponseDeviceProvidersItemProviderCategoriesItem {
	return &d
}

type Event struct {
	EventId     string    `json:"event_id"`
	DeviceId    *string   `json:"device_id,omitempty"`
	EventType   string    `json:"event_type"`
	WorkspaceId string    `json:"workspace_id"`
	CreatedAt   time.Time `json:"created_at"`
	OccurredAt  time.Time `json:"occurred_at"`
}

type HvacModeSetting string

const (
	HvacModeSettingOff      HvacModeSetting = "off"
	HvacModeSettingHeat     HvacModeSetting = "heat"
	HvacModeSettingCool     HvacModeSetting = "cool"
	HvacModeSettingHeatcool HvacModeSetting = "heatcool"
)

func NewHvacModeSettingFromString(s string) (HvacModeSetting, error) {
	switch s {
	case "off":
		return HvacModeSettingOff, nil
	case "heat":
		return HvacModeSettingHeat, nil
	case "cool":
		return HvacModeSettingCool, nil
	case "heatcool":
		return HvacModeSettingHeatcool, nil
	}
	var t HvacModeSetting
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HvacModeSetting) Ptr() *HvacModeSetting {
	return &h
}

type Manufacturer string

const (
	ManufacturerAkuvox      Manufacturer = "akuvox"
	ManufacturerAugust      Manufacturer = "august"
	ManufacturerBrivo       Manufacturer = "brivo"
	ManufacturerButterflymx Manufacturer = "butterflymx"
	ManufacturerDoorking    Manufacturer = "doorking"
	ManufacturerGenie       Manufacturer = "genie"
	ManufacturerIgloo       Manufacturer = "igloo"
	ManufacturerKeywe       Manufacturer = "keywe"
	ManufacturerKwikset     Manufacturer = "kwikset"
	ManufacturerLinear      Manufacturer = "linear"
	ManufacturerLockly      Manufacturer = "lockly"
	ManufacturerNuki        Manufacturer = "nuki"
	ManufacturerPhilia      Manufacturer = "philia"
	ManufacturerSalto       Manufacturer = "salto"
	ManufacturerSamsung     Manufacturer = "samsung"
	ManufacturerSchlage     Manufacturer = "schlage"
	ManufacturerSeam        Manufacturer = "seam"
	ManufacturerUnknown     Manufacturer = "unknown"
	ManufacturerYale        Manufacturer = "yale"
	ManufacturerMinut       Manufacturer = "minut"
	ManufacturerTwoN        Manufacturer = "two_n"
	ManufacturerTtlock      Manufacturer = "ttlock"
	ManufacturerNest        Manufacturer = "nest"
	ManufacturerIgloohome   Manufacturer = "igloohome"
	ManufacturerEcobee      Manufacturer = "ecobee"
	ManufacturerHubitat     Manufacturer = "hubitat"
)

func NewManufacturerFromString(s string) (Manufacturer, error) {
	switch s {
	case "akuvox":
		return ManufacturerAkuvox, nil
	case "august":
		return ManufacturerAugust, nil
	case "brivo":
		return ManufacturerBrivo, nil
	case "butterflymx":
		return ManufacturerButterflymx, nil
	case "doorking":
		return ManufacturerDoorking, nil
	case "genie":
		return ManufacturerGenie, nil
	case "igloo":
		return ManufacturerIgloo, nil
	case "keywe":
		return ManufacturerKeywe, nil
	case "kwikset":
		return ManufacturerKwikset, nil
	case "linear":
		return ManufacturerLinear, nil
	case "lockly":
		return ManufacturerLockly, nil
	case "nuki":
		return ManufacturerNuki, nil
	case "philia":
		return ManufacturerPhilia, nil
	case "salto":
		return ManufacturerSalto, nil
	case "samsung":
		return ManufacturerSamsung, nil
	case "schlage":
		return ManufacturerSchlage, nil
	case "seam":
		return ManufacturerSeam, nil
	case "unknown":
		return ManufacturerUnknown, nil
	case "yale":
		return ManufacturerYale, nil
	case "minut":
		return ManufacturerMinut, nil
	case "two_n":
		return ManufacturerTwoN, nil
	case "ttlock":
		return ManufacturerTtlock, nil
	case "nest":
		return ManufacturerNest, nil
	case "igloohome":
		return ManufacturerIgloohome, nil
	case "ecobee":
		return ManufacturerEcobee, nil
	case "hubitat":
		return ManufacturerHubitat, nil
	}
	var t Manufacturer
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m Manufacturer) Ptr() *Manufacturer {
	return &m
}

type NoiseThreshold struct {
	NoiseThresholdId       string   `json:"noise_threshold_id"`
	DeviceId               string   `json:"device_id"`
	Name                   string   `json:"name"`
	NoiseThresholdNrs      *float64 `json:"noise_threshold_nrs,omitempty"`
	StartsDailyAt          string   `json:"starts_daily_at"`
	EndsDailyAt            string   `json:"ends_daily_at"`
	NoiseThresholdDecibels float64  `json:"noise_threshold_decibels"`
}

type NoiseThresholdsCreateResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty"`
	Ok            bool           `json:"ok"`
}

type NoiseThresholdsDeleteResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty"`
	Ok            bool           `json:"ok"`
}

type NoiseThresholdsGetResponse struct {
	NoiseThreshold *NoiseThreshold `json:"noise_threshold,omitempty"`
	Ok             bool            `json:"ok"`
}

type NoiseThresholdsListResponse struct {
	NoiseThresholds []*NoiseThreshold `json:"noise_thresholds,omitempty"`
	Ok              bool              `json:"ok"`
}

type NoiseThresholdsUpdateResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty"`
	Ok            bool           `json:"ok"`
}

type NukiDeviceMetadata struct {
	KeypadBatteryCritical *bool `json:"keypad_battery_critical,omitempty"`
}

type SchlageDeviceMetadata struct {
	DeviceId         string  `json:"device_id"`
	DeviceName       string  `json:"device_name"`
	AccessCodeLength int     `json:"access_code_length"`
	Model            *string `json:"model,omitempty"`
	LocationId       *string `json:"location_id,omitempty"`
}

type ServiceByServiceNameResponse struct {
	Ok                      bool           `json:"ok"`
	LastServiceEvaluationAt string         `json:"last_service_evaluation_at"`
	ServiceHealth           *ServiceHealth `json:"service_health,omitempty"`
}

type ServiceHealth struct {
	Service     string              `json:"service"`
	Status      ServiceHealthStatus `json:"status,omitempty"`
	Description string              `json:"description"`
}

type ServiceHealthStatus string

const (
	ServiceHealthStatusHealthy  ServiceHealthStatus = "healthy"
	ServiceHealthStatusDegraded ServiceHealthStatus = "degraded"
	ServiceHealthStatusDown     ServiceHealthStatus = "down"
)

func NewServiceHealthStatusFromString(s string) (ServiceHealthStatus, error) {
	switch s {
	case "healthy":
		return ServiceHealthStatusHealthy, nil
	case "degraded":
		return ServiceHealthStatusDegraded, nil
	case "down":
		return ServiceHealthStatusDown, nil
	}
	var t ServiceHealthStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ServiceHealthStatus) Ptr() *ServiceHealthStatus {
	return &s
}

type SimulateCreateUnmanagedAccessCodeResponse struct {
	AccessCode *SimulateCreateUnmanagedAccessCodeResponseAccessCode `json:"access_code,omitempty"`
	Ok         bool                                                 `json:"ok"`
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCode struct {
	Type      string
	Ongoing   *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing
	TimeBound *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound
}

func NewSimulateCreateUnmanagedAccessCodeResponseAccessCodeFromOngoing(value *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing) *SimulateCreateUnmanagedAccessCodeResponseAccessCode {
	return &SimulateCreateUnmanagedAccessCodeResponseAccessCode{Type: "ongoing", Ongoing: value}
}

func NewSimulateCreateUnmanagedAccessCodeResponseAccessCodeFromTimeBound(value *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound) *SimulateCreateUnmanagedAccessCodeResponseAccessCode {
	return &SimulateCreateUnmanagedAccessCodeResponseAccessCode{Type: "time_bound", TimeBound: value}
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCode) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "ongoing":
		value := new(SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Ongoing = value
	case "time_bound":
		value := new(SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.TimeBound = value
	}
	return nil
}

func (s SimulateCreateUnmanagedAccessCodeResponseAccessCode) MarshalJSON() ([]byte, error) {
	switch s.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.Type, s)
	case "ongoing":
		var marshaler = struct {
			Type string `json:"type"`
			*SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing
		}{
			Type: s.Type,
			SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing: s.Ongoing,
		}
		return json.Marshal(marshaler)
	case "time_bound":
		var marshaler = struct {
			Type string `json:"type"`
			*SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound
		}{
			Type: s.Type,
			SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound: s.TimeBound,
		}
		return json.Marshal(marshaler)
	}
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeVisitor interface {
	VisitOngoing(*SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing) error
	VisitTimeBound(*SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound) error
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCode) Accept(visitor SimulateCreateUnmanagedAccessCodeResponseAccessCodeVisitor) error {
	switch s.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", s.Type, s)
	case "ongoing":
		return visitor.VisitOngoing(s.Ongoing)
	case "time_bound":
		return visitor.VisitTimeBound(s.TimeBound)
	}
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing struct {
	AccessCodeId string                                                               `json:"access_code_id"`
	Code         *string                                                              `json:"code,omitempty"`
	CreatedAt    *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt `json:"created_at,omitempty"`
	IsManaged    bool                                                                 `json:"is_managed"`
	StartsAt     *string                                                              `json:"starts_at,omitempty"`
	EndsAt       *string                                                              `json:"ends_at,omitempty"`
	status       string
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing) Status() string {
	return s.status
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing) UnmarshalJSON(data []byte) error {
	type unmarshaler SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing(value)
	s.status = "set"
	return nil
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing) MarshalJSON() ([]byte, error) {
	type embed SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoing
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*s),
		Status: "set",
	}
	return json.Marshal(marshaler)
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt struct {
	typeName string
	String   string
	DateTime time.Time
}

func NewSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtFromString(value string) *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt {
	return &SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt{typeName: "string", String: value}
}

func NewSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtFromDateTime(value time.Time) *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt {
	return &SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt{typeName: "dateTime", DateTime: value}
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	var valueDateTime time.Time
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		s.typeName = "dateTime"
		s.DateTime = valueDateTime
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "dateTime":
		return json.Marshal(s.DateTime)
	}
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtVisitor interface {
	VisitString(string) error
	VisitDateTime(time.Time) error
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt) Accept(visitor SimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "dateTime":
		return visitor.VisitDateTime(s.DateTime)
	}
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound struct {
	AccessCodeId string                                                                 `json:"access_code_id"`
	Code         *string                                                                `json:"code,omitempty"`
	CreatedAt    *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt `json:"created_at,omitempty"`
	IsManaged    bool                                                                   `json:"is_managed"`
	StartsAt     *string                                                                `json:"starts_at,omitempty"`
	EndsAt       *string                                                                `json:"ends_at,omitempty"`
	status       string
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound) Status() string {
	return s.status
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound) UnmarshalJSON(data []byte) error {
	type unmarshaler SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound(value)
	s.status = "set"
	return nil
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound) MarshalJSON() ([]byte, error) {
	type embed SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBound
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*s),
		Status: "set",
	}
	return json.Marshal(marshaler)
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt struct {
	typeName string
	String   string
	DateTime time.Time
}

func NewSimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAtFromString(value string) *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt {
	return &SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt{typeName: "string", String: value}
}

func NewSimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAtFromDateTime(value time.Time) *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt {
	return &SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt{typeName: "dateTime", DateTime: value}
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	var valueDateTime time.Time
	if err := json.Unmarshal(data, &valueDateTime); err == nil {
		s.typeName = "dateTime"
		s.DateTime = valueDateTime
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "dateTime":
		return json.Marshal(s.DateTime)
	}
}

type SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAtVisitor interface {
	VisitString(string) error
	VisitDateTime(time.Time) error
}

func (s *SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAt) Accept(visitor SimulateCreateUnmanagedAccessCodeResponseAccessCodeTimeBoundCreatedAtVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return visitor.VisitString(s.String)
	case "dateTime":
		return visitor.VisitDateTime(s.DateTime)
	}
}

type SimulateTriggerNoiseThresholdResponse struct {
	Ok bool `json:"ok"`
}

type SupportedCapabililty string

const (
	SupportedCapabililtyAccessCode     SupportedCapabililty = "access_code"
	SupportedCapabililtyLock           SupportedCapabililty = "lock"
	SupportedCapabililtyNoiseDetection SupportedCapabililty = "noise_detection"
	SupportedCapabililtyThermostat     SupportedCapabililty = "thermostat"
	SupportedCapabililtyBattery        SupportedCapabililty = "battery"
)

func NewSupportedCapabililtyFromString(s string) (SupportedCapabililty, error) {
	switch s {
	case "access_code":
		return SupportedCapabililtyAccessCode, nil
	case "lock":
		return SupportedCapabililtyLock, nil
	case "noise_detection":
		return SupportedCapabililtyNoiseDetection, nil
	case "thermostat":
		return SupportedCapabililtyThermostat, nil
	case "battery":
		return SupportedCapabililtyBattery, nil
	}
	var t SupportedCapabililty
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SupportedCapabililty) Ptr() *SupportedCapabililty {
	return &s
}

type UnmanagedConvertToManagedResponse struct {
	Ok bool `json:"ok"`
}

type UnmanagedDeleteResponse struct {
	ActionAttempt *ActionAttempt `json:"action_attempt,omitempty"`
	Ok            bool           `json:"ok"`
}

type UnmanagedDevice struct {
	DeviceId              string                         `json:"device_id"`
	DeviceType            DeviceType                     `json:"device_type,omitempty"`
	ConnectedAccountId    string                         `json:"connected_account_id"`
	CapabilitiesSupported []SupportedCapabililty         `json:"capabilities_supported,omitempty"`
	WorkspaceId           string                         `json:"workspace_id"`
	Errors                []*UnmanagedDeviceErrorsItem   `json:"errors,omitempty"`
	Warnings              []*UnmanagedDeviceWarningsItem `json:"warnings,omitempty"`
	CreatedAt             time.Time                      `json:"created_at"`
	IsManaged             bool                           `json:"is_managed"`
	Properties            *UnmanagedDeviceProperties     `json:"properties,omitempty"`
}

type UnmanagedDeviceErrorsItem struct {
	ErrorCode string `json:"error_code"`
	Message   string `json:"message"`
}

type UnmanagedDeviceProperties struct {
	Name         string                          `json:"name"`
	Online       bool                            `json:"online"`
	Manufacturer *string                         `json:"manufacturer,omitempty"`
	ImageUrl     *string                         `json:"image_url,omitempty"`
	ImageAltText *string                         `json:"image_alt_text,omitempty"`
	Model        *UnmanagedDevicePropertiesModel `json:"model,omitempty"`
}

type UnmanagedDevicePropertiesModel struct {
	DisplayName string `json:"display_name"`
}

type UnmanagedDeviceWarningsItem struct {
	WarningCode string `json:"warning_code"`
	Message     string `json:"message"`
}

type UnmanagedGetResponse struct {
	AccessCode *UnmanagedGetResponseAccessCode `json:"access_code,omitempty"`
	Ok         bool                            `json:"ok"`
}

type UnmanagedGetResponseAccessCode struct {
	Type         UnmanagedGetResponseAccessCodeType `json:"type,omitempty"`
	AccessCodeId string                             `json:"access_code_id"`
	DeviceId     string                             `json:"device_id"`
	Name         *string                            `json:"name,omitempty"`
	Code         *string                            `json:"code,omitempty"`
	CreatedAt    time.Time                          `json:"created_at"`
	Errors       interface{}                        `json:"errors,omitempty"`
	Warnings     interface{}                        `json:"warnings,omitempty"`
	IsManaged    bool                               `json:"is_managed"`
	StartsAt     *time.Time                         `json:"starts_at,omitempty"`
	EndsAt       *time.Time                         `json:"ends_at,omitempty"`
	status       string
}

func (u *UnmanagedGetResponseAccessCode) Status() string {
	return u.status
}

func (u *UnmanagedGetResponseAccessCode) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedGetResponseAccessCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedGetResponseAccessCode(value)
	u.status = "set"
	return nil
}

func (u *UnmanagedGetResponseAccessCode) MarshalJSON() ([]byte, error) {
	type embed UnmanagedGetResponseAccessCode
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*u),
		Status: "set",
	}
	return json.Marshal(marshaler)
}

type UnmanagedGetResponseAccessCodeType string

const (
	UnmanagedGetResponseAccessCodeTypeTimeBound UnmanagedGetResponseAccessCodeType = "time_bound"
	UnmanagedGetResponseAccessCodeTypeOngoing   UnmanagedGetResponseAccessCodeType = "ongoing"
)

func NewUnmanagedGetResponseAccessCodeTypeFromString(s string) (UnmanagedGetResponseAccessCodeType, error) {
	switch s {
	case "time_bound":
		return UnmanagedGetResponseAccessCodeTypeTimeBound, nil
	case "ongoing":
		return UnmanagedGetResponseAccessCodeTypeOngoing, nil
	}
	var t UnmanagedGetResponseAccessCodeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedGetResponseAccessCodeType) Ptr() *UnmanagedGetResponseAccessCodeType {
	return &u
}

type UnmanagedListResponse struct {
	Devices []*UnmanagedDevice `json:"devices,omitempty"`
	Ok      bool               `json:"ok"`
}

type UnmanagedListResponseAccessCodesItem struct {
	Type         UnmanagedListResponseAccessCodesItemType `json:"type,omitempty"`
	AccessCodeId string                                   `json:"access_code_id"`
	DeviceId     string                                   `json:"device_id"`
	Name         *string                                  `json:"name,omitempty"`
	Code         *string                                  `json:"code,omitempty"`
	CreatedAt    time.Time                                `json:"created_at"`
	Errors       interface{}                              `json:"errors,omitempty"`
	Warnings     interface{}                              `json:"warnings,omitempty"`
	IsManaged    bool                                     `json:"is_managed"`
	StartsAt     *time.Time                               `json:"starts_at,omitempty"`
	EndsAt       *time.Time                               `json:"ends_at,omitempty"`
	status       string
}

func (u *UnmanagedListResponseAccessCodesItem) Status() string {
	return u.status
}

func (u *UnmanagedListResponseAccessCodesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler UnmanagedListResponseAccessCodesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UnmanagedListResponseAccessCodesItem(value)
	u.status = "set"
	return nil
}

func (u *UnmanagedListResponseAccessCodesItem) MarshalJSON() ([]byte, error) {
	type embed UnmanagedListResponseAccessCodesItem
	var marshaler = struct {
		embed
		Status string `json:"status"`
	}{
		embed:  embed(*u),
		Status: "set",
	}
	return json.Marshal(marshaler)
}

type UnmanagedListResponseAccessCodesItemType string

const (
	UnmanagedListResponseAccessCodesItemTypeTimeBound UnmanagedListResponseAccessCodesItemType = "time_bound"
	UnmanagedListResponseAccessCodesItemTypeOngoing   UnmanagedListResponseAccessCodesItemType = "ongoing"
)

func NewUnmanagedListResponseAccessCodesItemTypeFromString(s string) (UnmanagedListResponseAccessCodesItemType, error) {
	switch s {
	case "time_bound":
		return UnmanagedListResponseAccessCodesItemTypeTimeBound, nil
	case "ongoing":
		return UnmanagedListResponseAccessCodesItemTypeOngoing, nil
	}
	var t UnmanagedListResponseAccessCodesItemType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UnmanagedListResponseAccessCodesItemType) Ptr() *UnmanagedListResponseAccessCodesItemType {
	return &u
}

type UnmanagedUpdateResponse struct {
	Ok bool `json:"ok"`
}

type Webhook struct {
	WebhookId  string   `json:"webhook_id"`
	Url        string   `json:"url"`
	EventTypes []string `json:"event_types,omitempty"`
	Secret     *string  `json:"secret,omitempty"`
}

type Workspace struct {
	WorkspaceId        string  `json:"workspace_id"`
	Name               string  `json:"name"`
	IsSandbox          bool    `json:"is_sandbox"`
	ConnectPartnerName *string `json:"connect_partner_name,omitempty"`
}
