// This file was auto-generated by Fern from our API Definition.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	core "github.com/seamapi/go/core"
	io "io"
	http "net/http"
)

type ThermostatsClient interface {
	Get(ctx context.Context, request *ThermostatsGetRequest) (*ThermostatsGetResponse, error)
	Heat(ctx context.Context, request *ThermostatsHeatRequest) (*ThermostatsHeatResponse, error)
	List(ctx context.Context, request *ThermostatsListRequest) (*ThermostatsListResponse, error)
	Update(ctx context.Context, request *ThermostatsUpdateRequest) (*ThermostatsUpdateResponse, error)
	ClimateSettingSchedules() ClimateSettingSchedulesClient
}

func NewThermostatsClient(opts ...core.ClientOption) ThermostatsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &thermostatsClient{
		baseURL:                       options.BaseURL,
		httpClient:                    options.HTTPClient,
		header:                        options.ToHeader(),
		climateSettingSchedulesClient: NewClimateSettingSchedulesClient(opts...),
	}
}

type thermostatsClient struct {
	baseURL                       string
	httpClient                    core.HTTPClient
	header                        http.Header
	climateSettingSchedulesClient ClimateSettingSchedulesClient
}

func (t *thermostatsClient) Get(ctx context.Context, request *ThermostatsGetRequest) (*ThermostatsGetResponse, error) {
	baseURL := "https://connect.getseam.com"
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "thermostats/get"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *ThermostatsGetResponse
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (t *thermostatsClient) Heat(ctx context.Context, request *ThermostatsHeatRequest) (*ThermostatsHeatResponse, error) {
	baseURL := "https://connect.getseam.com"
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "thermostats/heat"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *ThermostatsHeatResponse
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (t *thermostatsClient) List(ctx context.Context, request *ThermostatsListRequest) (*ThermostatsListResponse, error) {
	baseURL := "https://connect.getseam.com"
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "thermostats/list"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *ThermostatsListResponse
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (t *thermostatsClient) Update(ctx context.Context, request *ThermostatsUpdateRequest) (*ThermostatsUpdateResponse, error) {
	baseURL := "https://connect.getseam.com"
	if t.baseURL != "" {
		baseURL = t.baseURL
	}
	endpointURL := baseURL + "/" + "thermostats/update"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 401:
			value := new(UnauthorizedError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	var response *ThermostatsUpdateResponse
	if err := core.DoRequest(
		ctx,
		t.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		t.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (t *thermostatsClient) ClimateSettingSchedules() ClimateSettingSchedulesClient {
	return t.climateSettingSchedulesClient
}
