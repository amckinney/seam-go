// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

type DeviceCapabilitiesSupportedItem uint8

const (
	DeviceCapabilitiesSupportedItemAccessCode DeviceCapabilitiesSupportedItem = iota + 1
	DeviceCapabilitiesSupportedItemLock
	DeviceCapabilitiesSupportedItemNoiseDetection
	DeviceCapabilitiesSupportedItemThermostat
	DeviceCapabilitiesSupportedItemBattery
)

func (d DeviceCapabilitiesSupportedItem) String() string {
	switch d {
	default:
		return strconv.Itoa(int(d))
	case DeviceCapabilitiesSupportedItemAccessCode:
		return "access_code"
	case DeviceCapabilitiesSupportedItemLock:
		return "lock"
	case DeviceCapabilitiesSupportedItemNoiseDetection:
		return "noise_detection"
	case DeviceCapabilitiesSupportedItemThermostat:
		return "thermostat"
	case DeviceCapabilitiesSupportedItemBattery:
		return "battery"
	}
}

func (d DeviceCapabilitiesSupportedItem) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", d.String())), nil
}

func (d *DeviceCapabilitiesSupportedItem) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "access_code":
		value := DeviceCapabilitiesSupportedItemAccessCode
		*d = value
	case "lock":
		value := DeviceCapabilitiesSupportedItemLock
		*d = value
	case "noise_detection":
		value := DeviceCapabilitiesSupportedItemNoiseDetection
		*d = value
	case "thermostat":
		value := DeviceCapabilitiesSupportedItemThermostat
		*d = value
	case "battery":
		value := DeviceCapabilitiesSupportedItemBattery
		*d = value
	}
	return nil
}
