// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt struct {
	typeName string
	String   string
	String   string
}

func NewAccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtFromString(value string) *AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt {
	return &AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt{typeName: "string", String: value}
}

func NewAccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtFromString(value string) *AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt {
	return &AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt{typeName: "string", String: value}
}

func (a *AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		a.typeName = "string"
		a.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return json.Marshal(a.String)
	case "string":
		return json.Marshal(a.String)
	}
}

type AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtVisitor interface {
	VisitString(string) error
	VisitString(string) error
}

func (a *AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAt) Accept(v AccessCodesSimulateCreateUnmanagedAccessCodeResponseAccessCodeOngoingCreatedAtVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "string":
		return v.VisitString(a.String)
	case "string":
		return v.VisitString(a.String)
	}
}
