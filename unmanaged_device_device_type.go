// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type UnmanagedDeviceDeviceType struct {
	typeName                                           string
	UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
	UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
	UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
}

func NewUnmanagedDeviceDeviceTypeFromUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(value UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType) *UnmanagedDeviceDeviceType {
	return &UnmanagedDeviceDeviceType{typeName: "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType", UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType: value}
}

func NewUnmanagedDeviceDeviceTypeFromUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(value UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType) *UnmanagedDeviceDeviceType {
	return &UnmanagedDeviceDeviceType{typeName: "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType", UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType: value}
}

func NewUnmanagedDeviceDeviceTypeFromUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(value UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType) *UnmanagedDeviceDeviceType {
	return &UnmanagedDeviceDeviceType{typeName: "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType", UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType: value}
}

func (u *UnmanagedDeviceDeviceType) UnmarshalJSON(data []byte) error {
	var valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
	if err := json.Unmarshal(data, &valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType); err == nil {
		u.typeName = "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType"
		u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType = valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
		return nil
	}
	var valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
	if err := json.Unmarshal(data, &valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType); err == nil {
		u.typeName = "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType"
		u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType = valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
		return nil
	}
	var valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
	if err := json.Unmarshal(data, &valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType); err == nil {
		u.typeName = "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType"
		u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType = valueUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UnmanagedDeviceDeviceType) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType":
		return json.Marshal(u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType)
	case "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType":
		return json.Marshal(u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType)
	case "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType":
		return json.Marshal(u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType)
	}
}

type UnmanagedDeviceDeviceTypeVisitor interface {
	VisitUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType) error
	VisitUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType) error
	VisitUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType) error
}

func (u *UnmanagedDeviceDeviceType) Accept(v UnmanagedDeviceDeviceTypeVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType":
		return v.VisitUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType)
	case "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType":
		return v.VisitUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType)
	case "unmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType":
		return v.VisitUnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType(u.UnmanagedDeviceDeviceTypeUnmanagedDeviceDeviceType)
	}
}
